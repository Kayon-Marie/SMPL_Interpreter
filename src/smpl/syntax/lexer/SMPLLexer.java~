/* The following code was generated by JFlex 1.6.1 */

package smpl.syntax.lexer;

/* Specification for SMPL tokens */

// user customisations
import java_cup.runtime.*;

import smpl.exceptions.TokenException;

import smpl.syntax.parser.sym;

// Jlex directives
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/smpl/syntax/lexer/SMPLLexer.jflex</tt>
 */
public class SMPLLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\3\1\63\1\62\1\21\1\1\22\0\1\3\1\17"+
    "\1\61\1\6\1\0\1\37\1\30\1\0\1\45\1\46\1\35\1\33"+
    "\1\51\1\34\1\14\1\36\2\55\10\5\1\44\1\52\1\15\1\16"+
    "\1\15\2\0\32\12\1\53\1\60\1\22\1\40\1\4\1\0\1\23"+
    "\1\54\1\11\1\25\1\13\1\10\2\12\1\43\2\12\1\42\1\12"+
    "\1\24\1\26\1\41\1\12\1\27\1\12\1\7\1\57\2\12\1\56"+
    "\2\12\1\47\1\31\1\50\1\32\6\0\1\62\32\0\1\20\u15df\0"+
    "\1\20\u097f\0\13\20\35\0\2\62\5\0\1\20\57\0\1\20\u0fa0\0"+
    "\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\0\1\5\2\6"+
    "\1\0\1\7\5\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\3\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\3\1\4\1\35\1\36\1\37\1\0"+
    "\1\40\3\0\1\35\1\6\3\3\1\41\3\3\1\42"+
    "\1\43\1\44\1\45\2\0\1\3\1\4\1\35\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\3\3"+
    "\1\56\4\57\1\60\1\61\1\62\1\63\1\3\1\64"+
    "\1\3\1\62\2\3\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\150\0\234\0\320\0\u0104"+
    "\0\u0138\0\u016c\0\u01a0\0\150\0\u01a0\0\150\0\u01d4\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\150\0\u02d8\0\u030c\0\u0340\0\234"+
    "\0\150\0\234\0\150\0\234\0\150\0\234\0\150\0\u0374"+
    "\0\u03a8\0\234\0\u03dc\0\u0410\0\u0444\0\u0478\0\u03dc\0\u03dc"+
    "\0\u04ac\0\u03dc\0\u04e0\0\u0514\0\u0548\0\u03dc\0\u03dc\0\u057c"+
    "\0\u05b0\0\u05e4\0\u0410\0\u0618\0\u064c\0\u0680\0\u03dc\0\234"+
    "\0\234\0\234\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u06b4"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u071c\0\u071c\0\u071c\0\u0888"+
    "\0\u08bc\0\u08f0\0\u071c\0\u0924\0\u06e8\0\u0958\0\234\0\u06b4"+
    "\0\u06b4\0\u098c\0\u071c\0\u09c0\0\234\0\u09f4\0\u0a28\0\u0a5c"+
    "\0\u0a90\0\u071c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\5\7"+
    "\1\12\1\13\1\14\1\15\1\0\1\6\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\7"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\7\1\10\2\7\1\3\1\47\1\0\1\4\1\50"+
    "\1\0\56\50\1\51\1\52\1\50\1\0\1\53\1\0"+
    "\1\53\1\0\14\53\2\0\40\53\66\0\1\53\1\0"+
    "\1\53\1\0\2\54\1\53\5\54\4\53\2\0\1\53"+
    "\5\54\11\53\3\54\10\53\4\54\2\53\2\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\55\6\53\1\56\3\53"+
    "\2\0\33\53\1\55\4\53\2\0\1\53\1\0\1\53"+
    "\1\0\3\53\1\57\1\60\1\61\1\53\1\62\4\53"+
    "\2\0\32\53\1\63\1\53\1\64\1\65\2\53\2\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\66\12\53\2\0"+
    "\33\53\1\66\4\53\2\0\1\53\1\0\1\53\1\0"+
    "\12\53\1\67\1\53\2\0\40\53\2\0\1\53\1\0"+
    "\1\53\1\0\2\54\1\53\5\54\4\53\2\0\1\53"+
    "\1\54\1\70\3\54\11\53\3\54\10\53\4\54\2\53"+
    "\2\0\1\53\1\0\1\53\1\0\2\54\1\53\5\54"+
    "\4\53\2\0\1\53\3\54\1\71\1\54\11\53\3\54"+
    "\10\53\4\54\2\53\2\0\1\53\1\0\1\53\1\0"+
    "\2\54\1\53\4\54\1\72\4\53\2\0\1\53\5\54"+
    "\11\53\3\54\10\53\4\54\2\53\2\0\1\53\1\0"+
    "\1\53\1\0\2\54\1\53\5\54\4\53\2\0\1\53"+
    "\4\54\1\73\11\53\3\54\10\53\4\54\2\53\2\0"+
    "\1\53\1\0\1\53\1\0\2\54\1\53\4\54\1\74"+
    "\4\53\2\0\1\53\5\54\11\53\3\54\10\53\4\54"+
    "\2\53\2\0\1\53\1\0\1\53\1\0\2\54\1\53"+
    "\5\54\4\53\2\0\1\53\4\54\1\75\11\53\3\54"+
    "\10\53\4\54\2\53\2\0\1\53\1\0\1\53\1\0"+
    "\2\54\1\53\4\54\1\76\4\53\2\0\1\53\5\54"+
    "\11\53\3\54\10\53\4\54\2\53\2\0\1\53\1\0"+
    "\1\53\1\0\12\53\1\77\1\53\2\0\40\53\2\0"+
    "\1\50\1\0\56\50\2\0\1\50\10\0\1\100\14\0"+
    "\1\101\34\0\1\102\2\0\1\103\1\104\1\103\1\104"+
    "\14\103\2\104\1\53\23\103\1\53\1\103\1\53\1\103"+
    "\1\53\7\103\2\104\1\103\1\104\1\103\1\104\2\105"+
    "\1\103\5\105\4\103\2\104\1\53\5\105\11\103\3\105"+
    "\2\103\1\53\1\103\1\53\1\103\1\53\1\103\4\105"+
    "\2\103\2\104\1\103\1\104\1\103\1\104\1\103\1\106"+
    "\6\103\1\107\3\103\2\104\1\53\23\103\1\53\1\103"+
    "\1\53\1\103\1\53\2\103\1\106\4\103\2\104\1\103"+
    "\1\104\1\103\1\104\1\103\1\107\12\103\2\104\1\53"+
    "\23\103\1\53\1\103\1\53\1\103\1\53\2\103\1\107"+
    "\4\103\2\104\1\103\1\104\1\103\1\104\1\110\2\103"+
    "\5\110\4\103\2\104\1\53\5\110\11\103\3\110\2\103"+
    "\1\53\1\103\1\53\1\103\1\53\1\103\1\110\1\103"+
    "\2\110\1\111\1\103\2\104\1\103\1\104\1\103\1\104"+
    "\14\103\2\104\1\53\23\103\1\53\1\103\1\53\1\103"+
    "\1\53\2\103\1\112\4\103\2\104\1\103\1\104\1\103"+
    "\1\104\2\113\1\103\5\113\4\103\2\104\1\53\5\113"+
    "\11\103\3\113\2\103\1\53\1\103\1\53\1\103\1\53"+
    "\1\103\4\113\2\103\2\104\1\103\1\104\1\103\1\104"+
    "\1\103\1\114\1\103\5\114\4\103\2\104\1\53\5\114"+
    "\11\103\3\114\2\103\1\53\1\103\1\53\1\103\1\53"+
    "\1\103\4\114\2\103\2\104\1\103\1\104\1\103\1\104"+
    "\2\105\1\103\5\105\4\103\2\104\1\53\2\105\1\115"+
    "\2\105\11\103\3\105\2\103\1\53\1\103\1\53\1\103"+
    "\1\53\1\103\4\105\2\103\2\104\1\103\1\104\1\103"+
    "\1\104\2\105\1\103\1\116\4\105\4\103\2\104\1\53"+
    "\5\105\11\103\3\105\2\103\1\53\1\103\1\53\1\103"+
    "\1\53\1\103\4\105\2\103\2\104\1\103\1\104\1\103"+
    "\1\104\2\105\1\103\1\105\1\117\3\105\4\103\2\104"+
    "\1\53\5\105\11\103\3\105\2\103\1\53\1\103\1\53"+
    "\1\103\1\53\1\103\4\105\2\103\2\104\1\103\1\104"+
    "\1\103\1\104\2\105\1\103\5\105\4\103\2\104\1\53"+
    "\1\120\4\105\11\103\3\105\2\103\1\53\1\103\1\53"+
    "\1\103\1\53\1\103\4\105\2\103\2\104\1\103\1\104"+
    "\1\103\1\104\2\105\1\103\5\105\4\103\2\104\1\53"+
    "\3\105\1\121\1\105\11\103\2\105\1\122\2\103\1\53"+
    "\1\103\1\53\1\103\1\53\1\103\4\105\2\103\2\104"+
    "\1\103\1\104\1\103\1\104\2\105\1\103\1\123\4\105"+
    "\4\103\2\104\1\53\5\105\11\103\3\105\2\103\1\53"+
    "\1\103\1\53\1\103\1\53\1\103\4\105\2\103\2\104"+
    "\1\103\1\124\1\103\1\104\14\103\1\104\1\125\1\53"+
    "\23\103\1\53\1\103\1\53\1\103\1\53\7\103\2\125"+
    "\1\0\1\126\17\0\1\127\40\0\2\127\1\103\1\124"+
    "\1\103\1\104\2\105\1\103\5\105\4\103\1\104\1\125"+
    "\1\53\5\105\11\103\3\105\2\103\1\53\1\103\1\53"+
    "\1\103\1\53\1\103\4\105\2\103\2\125\1\103\1\124"+
    "\1\103\1\104\1\103\1\106\6\103\1\107\3\103\1\104"+
    "\1\125\1\53\23\103\1\53\1\103\1\53\1\103\1\53"+
    "\2\103\1\106\4\103\2\125\1\103\1\124\1\103\1\104"+
    "\1\103\1\107\12\103\1\104\1\125\1\53\23\103\1\53"+
    "\1\103\1\53\1\103\1\53\2\103\1\107\4\103\2\125"+
    "\1\103\1\124\1\103\1\104\3\103\1\130\10\103\1\104"+
    "\1\125\1\53\1\103\1\131\21\103\1\53\1\103\1\53"+
    "\1\103\1\53\7\103\2\125\1\103\1\124\1\103\1\104"+
    "\14\103\1\104\1\125\1\53\23\103\1\53\1\103\1\53"+
    "\1\103\1\53\2\103\1\112\4\103\2\125\1\103\1\124"+
    "\1\103\1\104\2\113\1\103\5\113\4\103\1\104\1\125"+
    "\1\53\5\113\11\103\3\113\2\103\1\53\1\103\1\53"+
    "\1\103\1\53\1\103\4\113\2\103\2\125\1\103\1\124"+
    "\1\103\1\104\1\103\1\114\1\103\5\114\4\103\1\104"+
    "\1\125\1\53\5\114\11\103\3\114\2\103\1\53\1\103"+
    "\1\53\1\103\1\53\1\103\4\114\2\103\2\125\1\103"+
    "\1\124\1\103\1\104\2\105\1\103\5\105\4\103\1\104"+
    "\1\125\1\53\2\105\1\132\2\105\11\103\3\105\2\103"+
    "\1\53\1\103\1\53\1\103\1\53\1\103\4\105\2\103"+
    "\2\125\1\103\1\124\1\103\1\104\2\105\1\103\2\105"+
    "\1\133\2\105\4\103\1\104\1\125\1\53\5\105\11\103"+
    "\3\105\2\103\1\53\1\103\1\53\1\103\1\53\1\103"+
    "\4\105\2\103\2\125\1\103\1\124\1\103\1\104\2\105"+
    "\1\103\5\105\4\103\1\104\1\125\1\53\1\105\1\134"+
    "\3\105\11\103\3\105\2\103\1\53\1\103\1\53\1\103"+
    "\1\53\1\103\4\105\2\103\2\125\1\0\1\126\17\0"+
    "\1\127\40\0\1\127\1\135\63\0\1\135\1\103\1\124"+
    "\1\103\1\104\2\105\1\103\5\105\4\103\1\104\1\125"+
    "\1\53\5\105\11\103\2\105\1\136\2\103\1\53\1\103"+
    "\1\53\1\103\1\53\1\103\4\105\2\103\2\125\1\103"+
    "\1\124\1\103\1\104\2\105\1\103\1\137\4\105\4\103"+
    "\1\104\1\125\1\53\5\105\11\103\3\105\2\103\1\53"+
    "\1\103\1\53\1\103\1\53\1\103\4\105\2\103\2\125"+
    "\1\103\1\124\1\103\1\104\2\105\1\103\5\105\4\103"+
    "\1\104\1\125\1\53\1\105\1\140\3\105\11\103\3\105"+
    "\2\103\1\53\1\103\1\53\1\103\1\53\1\103\4\105"+
    "\2\103\2\125\1\103\1\124\1\103\1\104\2\105\1\103"+
    "\5\105\4\103\1\104\1\125\1\53\5\105\11\103\1\105"+
    "\1\141\1\105\2\103\1\53\1\103\1\53\1\103\1\53"+
    "\1\103\4\105\2\103\2\125\1\103\1\124\1\103\1\104"+
    "\2\105\1\103\1\142\4\105\4\103\1\104\1\125\1\53"+
    "\5\105\11\103\3\105\2\103\1\53\1\103\1\53\1\103"+
    "\1\53\1\103\4\105\2\103\2\125\1\103\1\124\1\103"+
    "\1\104\2\105\1\103\5\105\4\103\1\104\1\125\1\53"+
    "\1\105\1\142\3\105\11\103\3\105\2\103\1\53\1\103"+
    "\1\53\1\103\1\53\1\103\4\105\2\103\2\125";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2756];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\0\3\1\1\0"+
    "\22\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\0\5\1\1\0\1\1\3\0\12\1"+
    "\3\11\2\0\22\1\1\11\5\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

	public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SMPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, TokenException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { //skip newline, but reset char counter"+ZZ_NL+"\t\t\t yychar = 0; }");
            { //skip newline, but reset char counter
			 yychar = 0;
            }
          case 53: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { // skip whitespace }");
            { // skip whitespace
            }
          case 54: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { // VAR"+ZZ_NL+"\t       return new Symbol(sym.VAR, yytext()); }");
            { // VAR
	       return new Symbol(sym.VAR, yytext());
            }
          case 55: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { // INTEGER"+ZZ_NL+"\t       return new Symbol(sym.INT, "+ZZ_NL+"\t\t\t\t new Integer(yytext())); }");
            { // INTEGER
	       return new Symbol(sym.INT, 
				 new Integer(yytext()));
            }
          case 56: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return new Symbol(sym.PERIOD); }");
            { return new Symbol(sym.PERIOD);
            }
          case 57: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return new Symbol(sym.RELOP, yytext()); }");
            { return new Symbol(sym.RELOP, yytext());
            }
          case 58: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return new Symbol(sym.RSQUARE); }");
            { return new Symbol(sym.RSQUARE);
            }
          case 59: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return new Symbol(sym.BAND); }");
            { return new Symbol(sym.BAND);
            }
          case 60: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return new Symbol(sym.BOR); }");
            { return new Symbol(sym.BOR);
            }
          case 61: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return new Symbol(sym.NEG); }");
            { return new Symbol(sym.NEG);
            }
          case 62: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return new Symbol(sym.PLUS); }");
            { return new Symbol(sym.PLUS);
            }
          case 63: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return new Symbol(sym.MINUS); }");
            { return new Symbol(sym.MINUS);
            }
          case 64: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return new Symbol(sym.MUL); }");
            { return new Symbol(sym.MUL);
            }
          case 65: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return new Symbol(sym.DIV); }");
            { return new Symbol(sym.DIV);
            }
          case 66: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return new Symbol(sym.MOD); }");
            { return new Symbol(sym.MOD);
            }
          case 67: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return new Symbol(sym.POWER); }");
            { return new Symbol(sym.POWER);
            }
          case 68: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return new Symbol(sym.COLON); }");
            { return new Symbol(sym.COLON);
            }
          case 69: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return new Symbol(sym.LPAREN); }");
            { return new Symbol(sym.LPAREN);
            }
          case 70: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return new Symbol(sym.RPAREN); }");
            { return new Symbol(sym.RPAREN);
            }
          case 71: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return new Symbol(sym.LBRACE); }");
            { return new Symbol(sym.LBRACE);
            }
          case 72: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return new Symbol(sym.RBRACE); }");
            { return new Symbol(sym.RBRACE);
            }
          case 73: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return new Symbol(sym.COMMA); }");
            { return new Symbol(sym.COMMA);
            }
          case 74: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return new Symbol(sym.SEMI); }");
            { return new Symbol(sym.SEMI);
            }
          case 75: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return new Symbol(sym.LSQUARE); }");
            { return new Symbol(sym.LSQUARE);
            }
          case 76: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { string.setLength(0); yybegin(STRING); }");
            { string.setLength(0); yybegin(STRING);
            }
          case 77: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { string.append( yytext() ); }");
            { string.append( yytext() );
            }
          case 78: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { string.append(\'\\\\\'); }");
            { string.append('\\');
            }
          case 79: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { yybegin(YYINITIAL);"+ZZ_NL+"\t\t\t\t\t\treturn new Symbol(sym.STRING, string.toString()); }");
            { yybegin(YYINITIAL);
						return new Symbol(sym.STRING, string.toString());
            }
          case 80: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { // REAL"+ZZ_NL+"\t\t\treturn new Symbol(sym.REAL,"+ZZ_NL+"\t\t\t\t new Double(yytext())); }");
            { // REAL
			return new Symbol(sym.REAL,
				 new Double(yytext()));
            }
          case 81: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return new Symbol(sym.TRUE, new Boolean(true)); }");
            { return new Symbol(sym.TRUE, new Boolean(true));
            }
          case 82: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return new Symbol(sym.FALSE, new Boolean(false)); }");
            { return new Symbol(sym.FALSE, new Boolean(false));
            }
          case 83: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return new Symbol(sym.NIL); }");
            { return new Symbol(sym.NIL);
            }
          case 84: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return new Symbol(sym.OR); }");
            { return new Symbol(sym.OR);
            }
          case 85: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return new Symbol(sym.ASSIGN, yytext()); }");
            { return new Symbol(sym.ASSIGN, yytext());
            }
          case 86: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { string.append(\'\\t\'); }");
            { string.append('\t');
            }
          case 87: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { string.append(\'\\n\'); }");
            { string.append('\n');
            }
          case 88: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { string.append(\'\\\"\'); }");
            { string.append('\"');
            }
          case 89: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { // ChARACTER"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, yycharat(2)); }");
            { // ChARACTER
			return new Symbol(sym.CHAR, yycharat(2));
            }
          case 90: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { //SPECIAL CHARACTERS"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, \'\\\\\'); }");
            { //SPECIAL CHARACTERS
			return new Symbol(sym.CHAR, '\\');
            }
          case 91: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { // BINARY"+ZZ_NL+"\t\t\tString i = yytext().substring(2);"+ZZ_NL+"\t\t\treturn new Symbol(sym.INT,"+ZZ_NL+"\t\t\t\t Integer.parseInt(i, 2)); }");
            { // BINARY
			String i = yytext().substring(2);
			return new Symbol(sym.INT,
				 Integer.parseInt(i, 2));
            }
          case 92: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { // HEX"+ZZ_NL+"\t\t\tString i = yytext().substring(2);"+ZZ_NL+"\t\t\treturn new Symbol(sym.INT,"+ZZ_NL+"\t\t\t\t Integer.parseInt(i,16)); }");
            { // HEX
			String i = yytext().substring(2);
			return new Symbol(sym.INT,
				 Integer.parseInt(i,16));
            }
          case 93: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { //Unicode"+ZZ_NL+"\t\t\treturn new Symbol(sym.UNI, yytext().substring(2)); }");
            { //Unicode
			return new Symbol(sym.UNI, yytext().substring(2));
            }
          case 94: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return new Symbol(sym.AND); }");
            { return new Symbol(sym.AND);
            }
          case 95: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return new Symbol(sym.NOT); }");
            { return new Symbol(sym.NOT);
            }
          case 96: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return new Symbol(sym.DEF); }");
            { return new Symbol(sym.DEF);
            }
          case 97: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return new Symbol(sym.LET); }");
            { return new Symbol(sym.LET);
            }
          case 98: break;
          case 47: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { String msg = String.format(\"Unrecognised Token: %s\", yytext());"+ZZ_NL+"\t       throw new TokenException(msg); }");
            { String msg = String.format("Unrecognised Token: %s", yytext());
	       throw new TokenException(msg);
            }
          case 99: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { //SPECIAL CHARACTERS"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, \'\\t\'); }");
            { //SPECIAL CHARACTERS
			return new Symbol(sym.CHAR, '\t');
            }
          case 100: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { //SPECIAL CHARACTERS"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, \'\\n\'); }");
            { //SPECIAL CHARACTERS
			return new Symbol(sym.CHAR, '\n');
            }
          case 101: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return new Symbol(sym.IO, yytext()); }");
            { return new Symbol(sym.IO, yytext());
            }
          case 102: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return new Symbol(sym.PROC); }");
            { return new Symbol(sym.PROC);
            }
          case 103: break;
          case 52: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { String msg = String.format(\"Unrecognised Token: %s\", yytext());"+ZZ_NL+"\t       throw new TokenException(msg); }");
            { String msg = String.format("Unrecognised Token: %s", yytext());
	       throw new TokenException(msg);
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SMPLLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SMPLLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SMPLLexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
