/* The following code was generated by JFlex 1.6.1 */

package smpl.syntax.lexer;

/* Specification for SMPL tokens */

// user customisations
import java_cup.runtime.*;

import smpl.exceptions.TokenException;

import smpl.syntax.parser.sym;

// Jlex directives
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/smpl/syntax/lexer/SMPLLexer.jflex</tt>
 */
public class SMPLLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\3\1\1\1\66\1\7\1\22\22\0\1\3\1\21"+
    "\1\65\1\6\1\0\1\41\1\34\1\10\1\51\1\52\1\24\1\37"+
    "\1\55\1\40\1\16\1\23\2\61\10\5\1\50\1\56\1\17\1\20"+
    "\1\17\2\0\6\14\24\4\1\57\1\64\1\26\1\42\1\4\1\0"+
    "\1\27\1\60\1\13\1\31\1\15\1\12\1\4\1\47\1\45\2\4"+
    "\1\44\1\4\1\30\1\32\1\43\1\4\1\33\1\46\1\11\1\63"+
    "\2\4\1\62\2\4\1\53\1\35\1\54\1\36\6\0\1\66\32\0"+
    "\1\25\u15df\0\1\25\u097f\0\13\25\35\0\2\66\5\0\1\25\57\0"+
    "\1\25\u0fa0\0\1\25\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\2\0\2\1\1\5"+
    "\2\6\1\1\1\7\1\10\1\11\4\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\3\1\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\1\1\0\1\4\1\35\1\36\1\37"+
    "\1\0\1\40\3\0\2\1\1\35\1\6\1\41\4\1"+
    "\1\42\2\1\1\43\1\44\1\45\1\46\1\47\1\1"+
    "\2\0\1\4\1\35\1\50\1\51\1\52\1\53\1\54"+
    "\2\1\3\41\1\1\2\0\1\1\1\0\1\55\1\56"+
    "\1\57\1\1\1\60\4\61\1\62\1\63\1\64\1\65"+
    "\2\41\2\61\1\1\1\0\2\61\2\0\1\41\1\66"+
    "\2\67\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\245\0\334\0\u0113"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\156\0\u0226\0\u025d"+
    "\0\156\0\u014a\0\u0294\0\u02cb\0\u0302\0\u0339\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\245\0\u014a\0\245\0\u014a\0\245\0\u014a\0\245"+
    "\0\u014a\0\u044c\0\u0483\0\245\0\u04ba\0\u04f1\0\u0528\0\u055f"+
    "\0\u04f1\0\u04f1\0\u0596\0\u04f1\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u04ba\0\u04ba\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u04ba\0\u07f3\0\u082a\0\u04ba\0\u04f1\0\245\0\245\0\245"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u08cf\0\u0974\0\u09ab"+
    "\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0898\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0861\0\u0861\0\u0861\0\u0c3f"+
    "\0\u0861\0\u0898\0\u0c76\0\245\0\u0cad\0\u08cf\0\u08cf\0\u0861"+
    "\0\u0861\0\245\0\u0ce4\0\u0b63\0\u0d1b\0\u0d52\0\u0d89\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0861\0\u0861\0\245\0\u0d89\0\u08cf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\1\6"+
    "\1\11\1\12\3\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\4\1\20\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\3\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\3\1\7\3\3"+
    "\1\51\1\0\1\52\1\0\20\52\1\0\41\52\1\53"+
    "\1\54\1\52\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\1\56\11\55\1\0\2\55\1\0\1\56\21\55\10\56"+
    "\5\55\1\56\70\0\1\55\1\0\1\55\1\0\1\55"+
    "\1\57\1\55\1\0\1\56\5\55\1\60\3\55\1\0"+
    "\2\55\1\0\1\56\21\55\10\56\1\55\1\57\3\55"+
    "\1\56\1\0\1\56\1\0\1\56\1\0\3\56\1\0"+
    "\1\56\1\61\1\62\1\63\1\56\1\64\4\56\1\0"+
    "\2\56\1\0\32\56\1\65\1\56\1\66\1\67\2\56"+
    "\1\0\1\56\1\0\1\56\1\0\3\56\1\0\12\56"+
    "\1\0\2\56\1\0\40\56\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\1\56\11\55\1\0\2\55\1\0"+
    "\1\56\20\55\1\70\10\56\5\55\1\56\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\1\56\11\55\1\0"+
    "\2\55\1\0\1\56\15\55\1\71\3\55\10\56\5\55"+
    "\1\56\1\0\1\55\1\0\1\55\1\0\1\55\1\72"+
    "\1\55\1\0\1\56\11\55\1\0\2\55\1\0\1\56"+
    "\21\55\10\56\1\55\1\72\3\55\1\56\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\1\56\7\55\1\73"+
    "\1\55\1\0\2\55\1\0\1\56\21\55\10\56\5\55"+
    "\1\56\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\1\56\11\55\1\0\1\74\1\75\1\0\1\56\21\55"+
    "\10\56\5\55\1\56\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\1\56\11\55\1\0\2\55\1\0\1\56"+
    "\1\55\1\76\17\55\10\56\5\55\1\56\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\1\56\11\55\1\0"+
    "\2\55\1\0\1\56\3\55\1\77\15\55\10\56\5\55"+
    "\1\56\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\1\56\4\55\1\100\4\55\1\0\2\55\1\0\1\56"+
    "\21\55\10\56\5\55\1\56\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\1\56\11\55\1\0\2\55\1\0"+
    "\1\56\4\55\1\101\14\55\10\56\5\55\1\56\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\1\56\11\55"+
    "\1\0\2\55\1\0\1\56\4\55\1\102\14\55\10\56"+
    "\5\55\1\56\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\1\56\4\55\1\103\4\55\1\0\2\55\1\0"+
    "\1\56\21\55\10\56\5\55\1\56\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\1\56\1\55\1\104\7\55"+
    "\1\0\2\55\1\0\1\56\21\55\10\56\5\55\1\56"+
    "\1\0\1\56\1\0\1\56\1\0\3\56\1\0\10\56"+
    "\1\105\1\56\1\0\2\56\1\0\40\56\1\0\1\52"+
    "\1\0\20\52\1\0\41\52\2\0\1\52\11\0\1\106"+
    "\16\0\1\107\34\0\1\110\1\0\1\111\1\112\1\111"+
    "\1\112\3\111\1\112\1\113\11\111\1\112\2\111\1\112"+
    "\1\56\21\111\2\113\1\56\1\113\1\56\1\113\1\56"+
    "\1\113\5\111\1\113\1\112\1\113\1\112\1\113\1\112"+
    "\3\113\1\112\12\113\1\112\2\113\1\112\1\56\23\113"+
    "\1\56\1\113\1\56\1\113\1\56\7\113\1\112\1\111"+
    "\1\112\1\111\1\112\1\111\1\114\1\111\1\112\1\113"+
    "\5\111\1\115\3\111\1\112\2\111\1\112\1\56\21\111"+
    "\2\113\1\56\1\113\1\56\1\113\1\56\1\113\1\111"+
    "\1\114\3\111\1\113\1\112\1\111\1\112\1\111\1\112"+
    "\1\111\1\115\1\111\1\112\1\113\11\111\1\112\2\111"+
    "\1\112\1\56\21\111\2\113\1\56\1\113\1\56\1\113"+
    "\1\56\1\113\1\111\1\115\3\111\1\113\1\112\1\113"+
    "\1\112\1\113\1\112\1\116\2\113\1\112\1\113\5\116"+
    "\4\113\1\112\2\113\1\112\1\56\5\116\7\113\5\116"+
    "\2\113\1\56\1\113\1\56\1\113\1\56\1\113\1\116"+
    "\1\113\2\116\1\117\1\113\1\112\1\113\1\112\1\113"+
    "\1\112\3\113\1\112\12\113\1\112\2\113\1\112\1\56"+
    "\23\113\1\56\1\113\1\56\1\113\1\56\2\113\1\120"+
    "\4\113\1\112\1\113\1\112\1\113\1\112\1\113\1\121"+
    "\1\113\1\112\2\113\4\121\4\113\1\112\2\113\1\112"+
    "\1\56\1\121\1\113\1\121\20\113\1\56\1\113\1\56"+
    "\1\113\1\56\1\113\2\121\4\113\1\112\1\113\1\112"+
    "\1\113\1\112\1\113\1\122\1\113\1\112\2\113\4\122"+
    "\4\113\1\112\2\113\1\112\1\56\1\122\1\113\1\122"+
    "\20\113\1\56\1\113\1\56\1\113\1\56\1\113\2\122"+
    "\4\113\1\112\1\111\1\112\1\111\1\112\3\111\1\112"+
    "\1\113\4\111\1\123\4\111\1\112\2\111\1\112\1\56"+
    "\21\111\2\113\1\56\1\113\1\56\1\113\1\56\1\113"+
    "\5\111\1\113\1\112\1\111\1\112\1\111\1\112\3\111"+
    "\1\112\1\113\11\111\1\112\2\111\1\112\1\56\17\111"+
    "\1\124\1\111\2\113\1\56\1\113\1\56\1\113\1\56"+
    "\1\113\5\111\1\113\1\112\1\74\1\125\1\74\1\126"+
    "\3\74\1\126\12\74\1\127\2\74\1\126\40\74\1\126"+
    "\1\130\1\131\1\130\1\131\3\130\1\131\1\132\11\130"+
    "\1\131\1\130\1\133\1\131\1\134\21\130\2\132\1\134"+
    "\1\132\1\134\1\132\1\134\1\132\5\130\1\132\1\131"+
    "\1\111\1\112\1\111\1\112\3\111\1\112\1\113\11\111"+
    "\1\112\2\111\1\112\1\56\2\111\1\135\16\111\2\113"+
    "\1\56\1\113\1\56\1\113\1\56\1\113\5\111\1\113"+
    "\1\112\1\111\1\112\1\111\1\112\3\111\1\112\1\113"+
    "\1\136\10\111\1\112\2\111\1\112\1\56\21\111\2\113"+
    "\1\56\1\113\1\56\1\113\1\56\1\113\5\111\1\113"+
    "\1\112\1\111\1\112\1\111\1\112\3\111\1\112\1\113"+
    "\1\111\1\137\7\111\1\112\2\111\1\112\1\56\21\111"+
    "\2\113\1\56\1\113\1\56\1\113\1\56\1\113\5\111"+
    "\1\113\1\112\1\111\1\112\1\111\1\112\3\111\1\112"+
    "\1\113\11\111\1\112\2\111\1\112\1\56\3\111\1\140"+
    "\15\111\2\113\1\56\1\113\1\56\1\113\1\56\1\113"+
    "\5\111\1\113\1\112\1\111\1\112\1\111\1\112\3\111"+
    "\1\112\1\113\1\141\10\111\1\112\2\111\1\112\1\56"+
    "\21\111\2\113\1\56\1\113\1\56\1\113\1\56\1\113"+
    "\5\111\1\113\1\112\1\111\1\142\1\111\1\112\3\111"+
    "\1\142\1\113\11\111\1\143\2\111\1\112\1\56\21\111"+
    "\2\113\1\56\1\113\1\56\1\113\1\56\1\113\5\111"+
    "\1\113\1\142\1\0\1\144\5\0\1\144\12\0\1\145"+
    "\43\0\1\144\1\113\1\142\1\113\1\112\3\113\1\142"+
    "\12\113\1\143\2\113\1\112\1\56\23\113\1\56\1\113"+
    "\1\56\1\113\1\56\7\113\1\142\1\111\1\142\1\111"+
    "\1\112\1\111\1\114\1\111\1\142\1\113\5\111\1\115"+
    "\3\111\1\143\2\111\1\112\1\56\21\111\2\113\1\56"+
    "\1\113\1\56\1\113\1\56\1\113\1\111\1\114\3\111"+
    "\1\113\1\142\1\111\1\142\1\111\1\112\1\111\1\115"+
    "\1\111\1\142\1\113\11\111\1\143\2\111\1\112\1\56"+
    "\21\111\2\113\1\56\1\113\1\56\1\113\1\56\1\113"+
    "\1\111\1\115\3\111\1\113\1\142\1\113\1\142\1\113"+
    "\1\112\3\113\1\142\1\113\1\146\10\113\1\143\2\113"+
    "\1\112\1\56\1\113\1\147\21\113\1\56\1\113\1\56"+
    "\1\113\1\56\7\113\1\142\1\113\1\142\1\113\1\112"+
    "\3\113\1\142\12\113\1\143\2\113\1\112\1\56\23\113"+
    "\1\56\1\113\1\56\1\113\1\56\2\113\1\120\4\113"+
    "\1\142\1\113\1\142\1\113\1\112\1\113\1\121\1\113"+
    "\1\142\2\113\4\121\4\113\1\143\2\113\1\112\1\56"+
    "\1\121\1\113\1\121\20\113\1\56\1\113\1\56\1\113"+
    "\1\56\1\113\2\121\4\113\1\142\1\113\1\142\1\113"+
    "\1\112\1\113\1\122\1\113\1\142\2\113\4\122\4\113"+
    "\1\143\2\113\1\112\1\56\1\122\1\113\1\122\20\113"+
    "\1\56\1\113\1\56\1\113\1\56\1\113\2\122\4\113"+
    "\1\142\1\111\1\142\1\111\1\112\3\111\1\142\1\113"+
    "\11\111\1\143\2\111\1\112\1\56\1\111\1\150\17\111"+
    "\2\113\1\56\1\113\1\56\1\113\1\56\1\113\5\111"+
    "\1\113\1\142\1\111\1\142\1\111\1\112\3\111\1\142"+
    "\1\113\4\111\1\151\4\111\1\143\2\111\1\112\1\56"+
    "\21\111\2\113\1\56\1\113\1\56\1\113\1\56\1\113"+
    "\5\111\1\113\1\142\1\126\1\152\20\126\1\153\44\126"+
    "\1\0\1\152\5\0\1\144\12\0\1\145\43\0\1\144"+
    "\1\130\1\154\1\130\1\131\3\130\1\154\1\132\11\130"+
    "\1\155\1\130\1\156\1\131\1\134\21\130\2\132\1\134"+
    "\1\132\1\134\1\132\1\134\1\132\5\130\1\132\1\154"+
    "\1\157\1\160\5\157\1\160\12\157\1\161\1\157\1\162"+
    "\41\157\1\160\1\132\1\154\1\132\1\131\3\132\1\154"+
    "\12\132\1\155\1\132\1\163\1\131\1\134\23\132\1\134"+
    "\1\132\1\134\1\132\1\134\7\132\1\154\1\111\1\142"+
    "\1\111\1\112\3\111\1\142\1\113\11\111\1\143\1\164"+
    "\1\133\1\112\1\56\21\111\2\113\1\56\1\113\1\56"+
    "\1\113\1\56\1\113\5\111\1\113\1\142\1\132\1\131"+
    "\1\132\1\131\3\132\1\131\12\132\1\131\1\132\1\163"+
    "\1\131\1\134\23\132\1\134\1\132\1\134\1\132\1\134"+
    "\7\132\1\131\1\111\1\142\1\111\1\112\3\111\1\142"+
    "\1\113\2\111\1\165\6\111\1\143\2\111\1\112\1\56"+
    "\21\111\2\113\1\56\1\113\1\56\1\113\1\56\1\113"+
    "\5\111\1\113\1\142\1\0\1\166\5\0\1\144\12\0"+
    "\1\145\43\0\1\144\1\0\1\166\66\0\1\152\65\0"+
    "\1\157\1\167\5\157\1\160\12\157\1\161\1\157\1\162"+
    "\41\157\1\160\1\130\1\154\1\130\1\131\3\130\1\154"+
    "\1\132\11\130\1\155\1\164\1\156\1\131\1\134\21\130"+
    "\2\132\1\134\1\132\1\134\1\132\1\134\1\132\5\130"+
    "\1\132\1\154\24\157\1\162\43\157\1\167\22\157\1\162"+
    "\65\157\1\152\1\162\42\157\1\132\1\154\1\132\1\131"+
    "\3\132\1\154\12\132\1\155\1\170\1\163\1\131\1\134"+
    "\23\132\1\134\1\132\1\134\1\132\1\134\7\132\1\154";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3685];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\2\0\30\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\1\0\4\1\1\0\1\1\3\0\16\1"+
    "\3\11\1\1\2\0\15\1\2\0\1\1\1\0\7\1"+
    "\1\11\5\1\1\11\4\1\1\0\2\1\2\0\2\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

	public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SMPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, TokenException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { // VAR"+ZZ_NL+"\t       return new Symbol(sym.VAR, yytext()); }");
            { // VAR
	       return new Symbol(sym.VAR, yytext());
            }
          case 56: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { //skip newline, but reset char counter"+ZZ_NL+"\t\t\t yychar = 0; }");
            { //skip newline, but reset char counter
			 yychar = 0;
            }
          case 57: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { // skip whitespace }");
            { // skip whitespace
            }
          case 58: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { // INTEGER"+ZZ_NL+"\t       return new Symbol(sym.INT, "+ZZ_NL+"\t\t\t\t new Integer(yytext())); }");
            { // INTEGER
	       return new Symbol(sym.INT, 
				 new Integer(yytext()));
            }
          case 59: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return new Symbol(sym.PERIOD); }");
            { return new Symbol(sym.PERIOD);
            }
          case 60: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return new Symbol(sym.RELOP, yytext()); }");
            { return new Symbol(sym.RELOP, yytext());
            }
          case 61: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return new Symbol(sym.DIV); }");
            { return new Symbol(sym.DIV);
            }
          case 62: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return new Symbol(sym.MUL); }");
            { return new Symbol(sym.MUL);
            }
          case 63: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return new Symbol(sym.RSQUARE); }");
            { return new Symbol(sym.RSQUARE);
            }
          case 64: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return new Symbol(sym.BAND); }");
            { return new Symbol(sym.BAND);
            }
          case 65: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return new Symbol(sym.BOR); }");
            { return new Symbol(sym.BOR);
            }
          case 66: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return new Symbol(sym.NEG); }");
            { return new Symbol(sym.NEG);
            }
          case 67: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return new Symbol(sym.PLUS); }");
            { return new Symbol(sym.PLUS);
            }
          case 68: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return new Symbol(sym.MINUS); }");
            { return new Symbol(sym.MINUS);
            }
          case 69: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return new Symbol(sym.MOD); }");
            { return new Symbol(sym.MOD);
            }
          case 70: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return new Symbol(sym.POWER); }");
            { return new Symbol(sym.POWER);
            }
          case 71: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return new Symbol(sym.COLON); }");
            { return new Symbol(sym.COLON);
            }
          case 72: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return new Symbol(sym.LPAREN); }");
            { return new Symbol(sym.LPAREN);
            }
          case 73: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return new Symbol(sym.RPAREN); }");
            { return new Symbol(sym.RPAREN);
            }
          case 74: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return new Symbol(sym.LBRACE); }");
            { return new Symbol(sym.LBRACE);
            }
          case 75: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return new Symbol(sym.RBRACE); }");
            { return new Symbol(sym.RBRACE);
            }
          case 76: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return new Symbol(sym.COMMA); }");
            { return new Symbol(sym.COMMA);
            }
          case 77: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return new Symbol(sym.SEMI); }");
            { return new Symbol(sym.SEMI);
            }
          case 78: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return new Symbol(sym.LSQUARE); }");
            { return new Symbol(sym.LSQUARE);
            }
          case 79: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { string.setLength(0); yybegin(STRING); }");
            { string.setLength(0); yybegin(STRING);
            }
          case 80: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { string.append( yytext() ); }");
            { string.append( yytext() );
            }
          case 81: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { string.append(\'\\\\\'); }");
            { string.append('\\');
            }
          case 82: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { yybegin(YYINITIAL);"+ZZ_NL+"\t\t\t\t\t\treturn new Symbol(sym.STRING, string.toString()); }");
            { yybegin(YYINITIAL);
						return new Symbol(sym.STRING, string.toString());
            }
          case 83: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { // REAL"+ZZ_NL+"\t\t\treturn new Symbol(sym.REAL,"+ZZ_NL+"\t\t\t\t new Double(yytext())); }");
            { // REAL
			return new Symbol(sym.REAL,
				 new Double(yytext()));
            }
          case 84: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return new Symbol(sym.TRUE, new Boolean(true)); }");
            { return new Symbol(sym.TRUE, new Boolean(true));
            }
          case 85: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return new Symbol(sym.FALSE, new Boolean(false)); }");
            { return new Symbol(sym.FALSE, new Boolean(false));
            }
          case 86: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return new Symbol(sym.NIL); }");
            { return new Symbol(sym.NIL);
            }
          case 87: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { /* ignore */ }");
            { /* ignore */
            }
          case 88: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return new Symbol(sym.OR); }");
            { return new Symbol(sym.OR);
            }
          case 89: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return new Symbol(sym.IF); }");
            { return new Symbol(sym.IF);
            }
          case 90: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return new Symbol(sym.ASSIGN, yytext()); }");
            { return new Symbol(sym.ASSIGN, yytext());
            }
          case 91: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { string.append(\'\\t\'); }");
            { string.append('\t');
            }
          case 92: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { string.append(\'\\n\'); }");
            { string.append('\n');
            }
          case 93: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { string.append(\'\\\"\'); }");
            { string.append('\"');
            }
          case 94: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { // ChARACTER"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, yycharat(2)); }");
            { // ChARACTER
			return new Symbol(sym.CHAR, yycharat(2));
            }
          case 95: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { //SPECIAL CHARACTERS"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, \'\\\\\'); }");
            { //SPECIAL CHARACTERS
			return new Symbol(sym.CHAR, '\\');
            }
          case 96: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { // BINARY"+ZZ_NL+"\t\t\tString i = yytext().substring(2);"+ZZ_NL+"\t\t\treturn new Symbol(sym.INT,"+ZZ_NL+"\t\t\t\t Integer.parseInt(i, 2)); }");
            { // BINARY
			String i = yytext().substring(2);
			return new Symbol(sym.INT,
				 Integer.parseInt(i, 2));
            }
          case 97: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { // HEX"+ZZ_NL+"\t\t\tString i = yytext().substring(2);"+ZZ_NL+"\t\t\treturn new Symbol(sym.INT,"+ZZ_NL+"\t\t\t\t Integer.parseInt(i,16)); }");
            { // HEX
			String i = yytext().substring(2);
			return new Symbol(sym.INT,
				 Integer.parseInt(i,16));
            }
          case 98: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { //Unicode"+ZZ_NL+"\t\t\treturn new Symbol(sym.UNI, yytext().substring(2)); }");
            { //Unicode
			return new Symbol(sym.UNI, yytext().substring(2));
            }
          case 99: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return new Symbol(sym.AND); }");
            { return new Symbol(sym.AND);
            }
          case 100: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return new Symbol(sym.NOT); }");
            { return new Symbol(sym.NOT);
            }
          case 101: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return new Symbol(sym.DEF); }");
            { return new Symbol(sym.DEF);
            }
          case 102: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return new Symbol(sym.LET); }");
            { return new Symbol(sym.LET);
            }
          case 103: break;
          case 49: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { String msg = String.format(\"Unrecognised Token: %s\", yytext());"+ZZ_NL+"\t       throw new TokenException(msg); }");
            { String msg = String.format("Unrecognised Token: %s", yytext());
	       throw new TokenException(msg);
            }
          case 104: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { //SPECIAL CHARACTERS"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, \'\\t\'); }");
            { //SPECIAL CHARACTERS
			return new Symbol(sym.CHAR, '\t');
            }
          case 105: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { //SPECIAL CHARACTERS"+ZZ_NL+"\t\t\treturn new Symbol(sym.CHAR, \'\\n\'); }");
            { //SPECIAL CHARACTERS
			return new Symbol(sym.CHAR, '\n');
            }
          case 106: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return new Symbol(sym.THEN); }");
            { return new Symbol(sym.THEN);
            }
          case 107: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return new Symbol(sym.ELSE); }");
            { return new Symbol(sym.ELSE);
            }
          case 108: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return new Symbol(sym.PROC); }");
            { return new Symbol(sym.PROC);
            }
          case 109: break;
          case 55: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { String msg = String.format(\"Unrecognised Token: %s\", yytext());"+ZZ_NL+"\t       throw new TokenException(msg); }");
            { String msg = String.format("Unrecognised Token: %s", yytext());
	       throw new TokenException(msg);
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SMPLLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SMPLLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SMPLLexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
