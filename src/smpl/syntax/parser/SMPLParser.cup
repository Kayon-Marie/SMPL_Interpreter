package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import smpl.syntax.lexer.SMPLLexer;

import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ASSIGN;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Double REAL;
terminal Boolean TRUE;
terminal Boolean FALSE;

/* Non terminals */
non terminal SMPLProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;
non terminal Exp expression;
non terminal Exp term;
non terminal Exp factor;
non terminal empty;

/* Grammar rules */

program ::=	stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::=	stmtList:lst stmt:s {:
					lst.add(s); 
					RESULT = lst;
				:} |
	     		stmt:s {:
					RESULT = new StmtSequence(s);
				:};

stmt ::=	definition:d {: RESULT = d; :} |
	 		expression:e {: RESULT = new Statement(e); :};

definition ::=	VAR:v ASSIGN expression:e {:
		   			RESULT = new StmtDefinition(v, e);
				:};

expression ::=	expression:e PLUS term:t {:
					RESULT = new ExpAdd(e, t); :} |
				expression:e MINUS term:t {:
					RESULT = new ExpSub(e, t); :} |
				term:t {: RESULT = t; :};

term ::=	term:t MUL factor:f {:
				RESULT = new ExpMul(t, f); :} |
	 		term:t DIV factor:f {:
				RESULT = new ExpDiv(t, f); :} |
	 		term:t MOD factor:f {:
				RESULT = new ExpMod(t, f); :} |
			LPAREN MINUS factor: f RPAREN {:
				RESULT = new ExpNeg(f); :}		|
	 		factor:f {: RESULT = f; :};

factor ::=	INT:ilit {: RESULT = new ExpLit(ilit); :} |
	   		REAL:rlit {: RESULT = new ExpLit(rlit); :} |
	   		VAR:var {: RESULT = new ExpVar(var); :} |
			  TRUE: t {: RESULT = new ExpBool(t); :} |
			  FALSE: f {: RESULT = new ExpBool(f); :} |
	   		LPAREN expression:e RPAREN {: RESULT = e; :};

empty ::= ;