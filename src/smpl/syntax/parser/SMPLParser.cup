package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import smpl.syntax.lexer.SMPLLexer;

import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
<<<<<<< HEAD
terminal LPAREN, RPAREN, SEMI, DEF;
=======
terminal LPAREN, RPAREN, LBRACE, RBRACE, COMMA, SEMI, PROC;
>>>>>>> functions

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POWER;

//bitwise operators 
terminal BAND, BOR, NEG;

//logical operators
terminal AND, OR, NOT;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Double REAL;
terminal Boolean TRUE;
terminal Boolean FALSE;
terminal String RELOP;
terminal String ASSIGN;

/* Non terminals */
non terminal SMPLProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtAssignment assignment;
non terminal StmtDefinition definition;
non terminal Exp expression;
non terminal Exp compoundExp;
non terminal Exp term;
non terminal Exp factor;
non terminal Exp value;
non terminal Exp arithExp;
non terminal Exp relop;
non terminal Exp negation;
non terminal Exp logop;
non terminal Exp bool;
non terminal Exp bitOp;
non terminal empty;

// procedures
non terminal Exp procDefn;
non terminal Exp procCall;
non terminal ArrayList<String> paramListE;
non terminal ArrayList<String> paramList;


/* Grammar rules */

program ::=	stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::=	stmtList:lst stmt:s {:
					lst.add(s); 
					RESULT = lst;
				:} |	
	     		stmt:s {:
					RESULT = new StmtSequence(s);
				:};

stmt ::=	definition:d {: RESULT = d; :} |
			assignment: a SEMI {: RESULT = a; :} |
	 		expression:e SEMI {: RESULT = new StmtExp(e); :};

assignment ::= VAR:v ASSIGN expression:e {:
		   			RESULT = new StmtAssignment(v, e);
				:}; 

definition ::=	DEF VAR: v expression: e SEMI {:
					RESULT = new StmtDefinition(v, e);
				:};
								
expression ::=	logop: l {: RESULT = l; :} |
				compoundExp: e {: RESULT = e; :} |
				procDefn: proc {: RESULT = proc; :};

compoundExp ::= LBRACE stmtList: body RBRACE {: RESULT = body; :};

procDefn ::=	PROC LPAREN paramListE: params RPAREN expression: body {:
					RESULT = new ExpProc(params, body);
				:};

paramListE ::=	paramList: params {: RESULT = params; :} |
				empty {: RESULT = new ArrayList<>(); :};

paramList ::= 	paramList: params COMMA VAR: v {:
					params.add(v);
					RESULT = params;
				:} |
				VAR: v {: 
					ArrayList<String> lst = new ArrayList<>();
					lst.add(v);
					RESULT = lst; 
				:};

logop ::= 	logop: l AND negation: n {: RESULT = new ExpAnd(l, n); :} |
			logop: l OR negation: n {: RESULT = new ExpOr(l, n); :}	|
			negation: n {: RESULT = n; :};

negation ::= 	NOT relop: r {: RESULT = new ExpNot(r); :} |
				relop: r {: RESULT = r; :};

relop ::= 	relop:r  RELOP:sign arithExp: ae {:
				RESULT = new ExpRelOp(r,ae,sign);
			:} |
			bitOp: b {:
				RESULT = b;
			:};

bitOp ::= bitOp:b BAND arithExp: e {: RESULT = new ExpBAnd(b,e); :} |
		  bitOp:b BOR arithExp: e {: RESULT = new ExpBOr(b,e); :} |
		  arithExp:e {: RESULT = e; :};	

arithExp ::=	arithExp:e PLUS term:t {:
					RESULT = new ExpAdd(e, t); :} |
				arithExp:e MINUS term:t {:
					RESULT = new ExpSub(e, t); :} |
				LPAREN MINUS arithExp: ae RPAREN {:
					RESULT = new ExpNeg(ae); :}	|
				term:t {: RESULT = t; :};

term ::=	term:t MUL factor:f {:
				RESULT = new ExpMul(t, f); :} |
	 		term:t DIV factor:f {:
				RESULT = new ExpDiv(t, f); :} |
	 		term:t MOD factor:f {:
				RESULT = new ExpMod(t, f); :} |
	 		factor:f {: RESULT = f; :};

factor ::=	factor:f POWER value:v {: RESULT = new ExpPow(f, v); :} |
			bool: b {: RESULT = b; :} |
			value:v {: RESULT = v; :};

bool ::= 	TRUE: t {: RESULT = new ExpBool(t); :} |
			FALSE: f {: RESULT = new ExpBool(f); :};
	   		
value ::=   INT:ilit {: RESULT = new ExpLit(ilit); :} |
			REAL:rlit {: RESULT = new ExpLit(rlit); :} |
			VAR:var {: RESULT = new ExpVar(var); :} |
			LPAREN expression:e RPAREN {: RESULT = e; :};
			
empty ::= ;