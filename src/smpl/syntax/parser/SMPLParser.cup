package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import smpl.syntax.lexer.SMPLLexer;

import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, LBRACE, RBRACE, COMMA, SEMI, PERIOD, COLON;
terminal LSQUARE, RSQUARE;

// keywords
terminal DEF, PROC, LET,IF,THEN,ELSE,CASE;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POWER;

//bitwise operators 
terminal BAND, BOR, NEG;

//logical operators
terminal AND, OR, NOT;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Double REAL;
terminal Boolean TRUE;
terminal Boolean FALSE;
terminal Character CHAR;
terminal String UNI;
terminal String STRING;
terminal String RELOP;
terminal String ASSIGN;

/* Non terminals */
non terminal SMPLProgram program;

// statements
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtAssignment assignment;
non terminal StmtDefinition definition;
non terminal Statement letStmt;
non terminal Statement ifStmt;
non terminal Statement caseStmt;

//expressions
non terminal Exp expression;
non terminal Exp listExp;
non terminal ArrayList<Exp> expListE;
non terminal ArrayList<Exp> expList;  
non terminal Exp compoundExp;
non terminal Exp term;
non terminal Clause clause;
non terminal ArrayList<Clause> clauseAux;
non terminal ArrayList<Clause> clauseList;
non terminal Exp factor;
non terminal Exp power;
non terminal Exp value;
non terminal Exp arithExp;
non terminal Exp relop;
non terminal Exp negation;
non terminal Exp logop;
non terminal Exp bool;
non terminal Exp charLit;
non terminal Exp bitOp;
non terminal ArrayList<String> vars;
non terminal ArrayList<String> varAux;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

// vectors
// non terminal Exp vectorExp;
// non terminal ArrayList<Exp> subVectorListE;
// non terminal ArrayList<Exp> subVectorList;
// non terminal Exp subVector;

// procedures
non terminal Exp procDefn;
non terminal Exp procCall;
non terminal ArrayList<String> paramListE;
non terminal ArrayList<String> paramList;

// empty stuuff
terminal NIL;
non terminal empty;


/* Grammar rules */

program ::=	stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::=	stmtList:lst stmt:s {:
					lst.add(s); 
					RESULT = lst;
				:} |	
	     		stmt:s {:
					RESULT = new StmtSequence(s);
				:};

stmt ::=	definition:d  {: RESULT = d; :} |
			assignment: a SEMI {: RESULT = a; :} |
	 		expression:e SEMI {: RESULT = new StmtExp(e); :}|
			letStmt:lS SEMI {: RESULT = lS; :}|
			ifStmt:is SEMI {: RESULT = is; :};

ifStmt ::= IF expression:p THEN expression:e ELSE expression:e2 {: RESULT = new StmtIf(p,e,e2); :}|
			IF expression:p THEN expression:e {: RESULT = new StmtIf(p,e,null); :};

caseStmt ::= CASE LBRACE clauseList:c RBRACE {: RESULT = new StmtCase(c); :};

clauseList ::= clause:v clauseAux:vl {:
		vl.add(0,v);
		RESULT = vl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

clauseAux ::= COMMA clause:v clauseAux:vl {:
		  vl.add(0,v);
		  RESULT = vl;
		:} |
		empty {: RESULT = new ArrayList(); :};

clause ::= expression:e COLON expression:e2 {: RESULT = new Clause(e,e2); :}|
			ELSE COLON expression:s {: RESULT = new Clause (new ExpBool(true),s); :};

assignment ::= 	vars:v ASSIGN expListE:e {:
		   			RESULT = new StmtAssignment(v, e);
				:}; 

definition ::=	DEF VAR: v expression: e SEMI {:
					RESULT = new StmtDefinition(v, e);
				:};

								
expression ::=	logop: l {: RESULT = l; :} |
				compoundExp: e {: RESULT = e; :} |
				procDefn: proc {: RESULT = proc; :}|
				listExp: le {: RESULT = le; :}|
				caseStmt:cs {: RESULT = cs; :};
				// vectorExp: ve {: RESULT = ve; :};

/*
vectorExp ::= 	LSQUARE COLON expListE: list COLON RSQUARE {:
					RESULT = new ExpVector(list);
				:};
*/

// vectorExp ::= 	LSQUARE COLON subVectorListE: list COLON RSQUARE {:
// 					RESULT = new ExpVector(list);
// 				:};

// subVectorListE ::=	subVectorList: list {: RESULT = list; :} |
// 					empty {: RESULT = new ArrayList<>(); :};				

// subVectorList ::=	subVectorList: list COMMA subVector: sv {:
// 						list.add(sv); 
// 						RESULT = list; 
// 					:} |
// 					subVector: sv {:
// 						ArrayList<Exp> ls = new ArrayList<>(); 
// 						ls.add(sv);
// 						RESULT = ls; 
// 					:};

// subVector ::=	arithExp: size COLON expression: proc {:
// 					RESULT = new ExpSubVector(size, proc);
// 				:} |
// 				expression: e {: RESULT = e; :};
				
compoundExp ::= LBRACE stmtList: body RBRACE {: RESULT = body; :};

procDefn ::=	PROC LPAREN paramListE: params RPAREN expression: body {:
					RESULT = new ExpProcN(params, body);
				:} |
				PROC LPAREN paramListE: params PERIOD VAR: rest RPAREN expression: body {:
					RESULT = new ExpProcMulti(params, rest, body);
				:} | 
				PROC VAR: v expression: body {:
					RESULT = new ExpProcSingle(v, body);
				:};

paramListE ::=	paramList: params {: RESULT = params; :} |
				empty {: RESULT = new ArrayList<>(); :};

paramList ::= 	paramList: params COMMA VAR: v {:
					params.add(v);
					RESULT = params;
				:} |
				VAR: v {: 
					ArrayList<String> lst = new ArrayList<>();
					lst.add(v);
					RESULT = lst; 
				:};

// procCall ::=	expression: id multiExp: me {: RESULT = new ExpProcCall(id, me); :};
procCall ::=	factor: id LPAREN expListE:list RPAREN {:
					RESULT = new ExpProcCall(id, list);
				:};

expListE ::=	expList: pl {: RESULT = pl; :} | 
				empty {: RESULT = new ArrayList(); :};

expList ::=	expList:pl COMMA expression:e {: 
				pl.add(e); 
				RESULT = pl; 
			:} |
			expression :e {: 
				ArrayList<Exp> ls = new ArrayList<>(); 
				ls.add(e);
				RESULT = ls; 
			:};


//let Stmt
letStmt ::= LET LPAREN bindings:bs RPAREN expression:body {:
			RESULT = new StmtLet(bs, body);
           :};

//if Stmt

binding ::= VAR:v ASSIGN expression:e {:
		RESULT = new Binding(v, e);
	    :};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};

// list
listExp ::= LSQUARE expListE:e RSQUARE {: RESULT = new ExpList(e); :} |
			NIL {: RESULT = new ExpList(); :};

// logical operations
logop ::= 	logop: l AND negation: n {: RESULT = new ExpAnd(l, n); :} |
			logop: l OR negation: n {: RESULT = new ExpOr(l, n); :}	|
			negation: n {: RESULT = n; :};

// NOT logical operation
negation ::= 	NOT relop: r {: RESULT = new ExpNot(r); :} |
				relop: r {: RESULT = r; :};

// relational operations
relop ::= 	relop:r  RELOP:sign arithExp: ae {:
				RESULT = new ExpRelOp(r,ae,sign);
			:} |
			bitOp: b {:
				RESULT = b;
			:};

// bitwise operations
bitOp ::= bitOp:b BAND arithExp: e {: RESULT = new ExpBAnd(b,e); :} |
		  bitOp:b BOR arithExp: e {: RESULT = new ExpBOr(b,e); :} |
		  arithExp:e {: RESULT = e; :};	

// airhtmetic expressions
arithExp ::=	arithExp:e PLUS term:t {:
					RESULT = new ExpAdd(e, t); :} |
				arithExp:e MINUS term:t {:
					RESULT = new ExpSub(e, t); :} |
				LPAREN MINUS arithExp: ae RPAREN {:
					RESULT = new ExpNeg(ae); :}	|
				term:t {: RESULT = t; :};
	   		
term ::=	term:t MUL power: p {:
				RESULT = new ExpMul(t, p); :} |
	 		term:t DIV power: p {:
				RESULT = new ExpDiv(t, p); :} |
	 		term:t MOD power: p {:
				RESULT = new ExpMod(t, p); :} |
	 		power: p {: RESULT = p; :};

power ::= 	power: p POWER factor: f {: RESULT = new ExpPow(p, f); :} |
			factor: f {: RESULT = f; :};

// factors
factor ::=	value:v {: RESULT = v; :} |
			bool: b {: RESULT = b; :} |
			charLit: c {: RESULT = c; :} |
			VAR: v {: RESULT = new ExpVar(v); :}|
			procCall: pcall {: RESULT = pcall; :} |
			LPAREN expression:e RPAREN {: RESULT = e; :};

//character & string values
charLit ::= CHAR: c {: RESULT = new ExpChar(c); :} |
			STRING: s {: RESULT = new ExpString(s); :} |
			UNI: u {: RESULT = new ExpChar(u); :};

// boolean values
bool ::= 	TRUE: t {: RESULT = new ExpBool(t); :} |
			FALSE: f {: RESULT = new ExpBool(f); :};

// numbers - int, real	   		
value ::=   INT:ilit {: RESULT = new ExpLit(ilit); :} |
			REAL:rlit {: RESULT = new ExpLit(rlit); :};

vars ::= VAR:v varAux:vl {:
		vl.add(0,v);
		RESULT = vl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

varAux ::= COMMA VAR:v varAux:vl {:
		  vl.add(0,v);
		  RESULT = vl;
		:} |
		empty {: RESULT = new ArrayList(); :};
			
			
empty ::= ;