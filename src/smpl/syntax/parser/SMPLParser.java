
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 01 17:05:47 EST 2020
//----------------------------------------------------

package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.syntax.lexer.SMPLLexer;
import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 01 17:05:47 EST 2020
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\005\005\000" +
    "\002\006\006\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\014\005\000\002\035" +
    "\007\000\002\035\011\000\002\035\005\000\002\037\003" +
    "\000\002\037\003\000\002\040\005\000\002\040\003\000" +
    "\002\036\006\000\002\012\003\000\002\012\003\000\002" +
    "\013\005\000\002\013\003\000\002\007\007\000\002\034" +
    "\005\000\002\032\004\000\002\032\003\000\002\033\005" +
    "\000\002\033\003\000\002\011\005\000\002\011\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\003\000\002" +
    "\023\004\000\002\023\003\000\002\022\005\000\002\022" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\006\000" +
    "\002\021\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\017\005\000\002\017" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\025\003\000\002\025\003\000\002\020\003\000\002\020" +
    "\003\000\002\030\004\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\044\004\014\006\033\013\034\015\043\016" +
    "\041\017\037\033\017\034\015\035\051\036\030\037\025" +
    "\040\047\041\011\042\050\043\042\045\uffb9\046\020\001" +
    "\002\000\004\045\uffbc\001\002\000\004\002\201\001\002" +
    "\000\012\005\ufff5\010\ufff5\011\ufff5\014\ufff5\001\002\000" +
    "\042\004\uffc9\005\uffc9\010\uffc9\011\uffc9\014\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\031\uffc9\032\uffc9\044\uffc9\001\002\000\046\002\001" +
    "\004\014\006\033\013\034\015\043\016\041\017\037\033" +
    "\017\034\015\035\051\036\030\037\025\040\047\041\011" +
    "\042\050\043\042\045\uffb9\046\020\001\002\000\042\004" +
    "\uffc4\005\uffc4\010\uffc4\011\uffc4\014\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031" +
    "\uffc4\032\uffc4\044\uffc4\001\002\000\042\004\uffc6\005\uffc6" +
    "\010\uffc6\011\uffc6\014\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\044\uffc6\001\002\000\050\002\ufffd\004\ufffd\006\ufffd\007" +
    "\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\045\ufffd\046\ufffd\001\002\000\040\004\014\006\033" +
    "\013\034\016\041\021\176\033\017\034\015\035\055\036" +
    "\030\037\025\040\047\041\011\042\050\043\042\046\020" +
    "\001\002\000\042\004\uffbf\005\uffbf\010\uffbf\011\uffbf\014" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\031\uffbf\032\uffbf\044\uffbf\001\002\000" +
    "\012\005\ufff4\010\ufff4\011\ufff4\014\ufff4\001\002\000\024" +
    "\004\014\034\015\035\055\036\030\037\025\040\047\041" +
    "\011\042\050\043\042\001\002\000\012\005\uffdf\010\uffdf" +
    "\011\uffdf\014\uffdf\001\002\000\020\005\uffda\010\uffda\011" +
    "\uffda\014\uffda\031\uffda\032\uffda\044\173\001\002\000\004" +
    "\011\172\001\002\000\004\011\171\001\002\000\004\011" +
    "\170\001\002\000\042\004\uffc1\005\uffc1\010\uffc1\011\uffc1" +
    "\014\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\044\uffc1\001\002" +
    "\000\016\005\uffdc\010\uffdc\011\uffdc\014\uffdc\031\uffdc\032" +
    "\uffdc\001\002\000\036\005\uffd1\010\uffd1\011\uffd1\014\uffd1" +
    "\020\uffd1\021\uffd1\022\106\023\107\024\105\026\uffd1\027" +
    "\uffd1\031\uffd1\032\uffd1\044\uffd1\001\002\000\042\004\uffbe" +
    "\005\uffbe\010\uffbe\011\uffbe\014\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\031\uffbe" +
    "\032\uffbe\044\uffbe\001\002\000\016\005\ufff7\010\ufff7\011" +
    "\ufff7\014\ufff7\031\164\032\165\001\002\000\030\005\uffd5" +
    "\010\uffd5\011\uffd5\014\uffd5\020\102\021\103\026\uffd5\027" +
    "\uffd5\031\uffd5\032\uffd5\044\uffd5\001\002\000\044\004\014" +
    "\006\033\013\034\015\043\016\041\017\037\033\017\034" +
    "\015\035\051\036\030\037\025\040\047\041\011\042\050" +
    "\043\042\045\uffb9\046\020\001\002\000\040\004\014\006" +
    "\033\013\034\014\uffb9\016\041\033\017\034\015\035\055" +
    "\036\030\037\025\040\047\041\011\042\050\043\042\046" +
    "\020\001\002\000\012\005\ufff6\010\ufff6\011\ufff6\014\ufff6" +
    "\001\002\000\042\004\uffca\005\uffca\010\uffca\011\uffca\014" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\044\uffca\001\002\000" +
    "\004\004\141\001\002\000\004\045\137\001\002\000\006" +
    "\004\121\035\120\001\002\000\042\004\uffc3\005\uffc3\010" +
    "\uffc3\011\uffc3\014\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\044" +
    "\uffc3\001\002\000\004\035\115\001\002\000\042\004\062" +
    "\005\uffcb\010\uffcb\011\uffcb\014\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\032\uffcb\044\uffcb\001\002\000\042\004\uffc8\005\uffc8\010" +
    "\uffc8\011\uffc8\014\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\044" +
    "\uffc8\001\002\000\024\005\uffd8\010\uffd8\011\uffd8\014\uffd8" +
    "\026\077\027\100\031\uffd8\032\uffd8\044\uffd8\001\002\000" +
    "\042\004\uffc0\005\uffc0\010\uffc0\011\uffc0\014\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\031\uffc0\032\uffc0\044\uffc0\001\002\000\042\004\uffc2" +
    "\005\uffc2\010\uffc2\011\uffc2\014\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2" +
    "\032\uffc2\044\uffc2\001\002\000\040\004\uffc7\010\072\011" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\031\uffc7\032\uffc7\044\uffc7\045\uffb9\001" +
    "\002\000\040\005\uffcd\010\uffcd\011\uffcd\014\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\054\026\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\044\uffcd\001\002\000\050\002\ufffe" +
    "\004\ufffe\006\ufffe\007\ufffe\013\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe\001\002\000" +
    "\024\004\057\034\015\035\055\036\030\037\025\040\047" +
    "\041\011\042\050\043\042\001\002\000\042\004\uffc7\005" +
    "\uffc7\010\uffc7\011\uffc7\014\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032" +
    "\uffc7\044\uffc7\001\002\000\042\004\062\005\uffcc\010\uffcc" +
    "\011\uffcc\014\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\044\uffcc" +
    "\001\002\000\036\004\014\006\033\013\034\016\041\033" +
    "\017\034\015\035\055\036\030\037\025\040\047\041\011" +
    "\042\050\043\042\046\020\001\002\000\004\005\061\001" +
    "\002\000\042\004\uffc5\005\uffc5\010\uffc5\011\uffc5\014\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\031\uffc5\032\uffc5\044\uffc5\001\002\000\040" +
    "\004\014\005\uffb9\006\033\013\034\016\041\033\017\034" +
    "\015\035\055\036\030\037\025\040\047\041\011\042\050" +
    "\043\042\046\020\001\002\000\004\005\071\001\002\000" +
    "\012\005\uffea\010\067\011\uffea\014\uffea\001\002\000\010" +
    "\005\uffe9\011\uffe9\014\uffe9\001\002\000\012\005\uffe7\010" +
    "\uffe7\011\uffe7\014\uffe7\001\002\000\036\004\014\006\033" +
    "\013\034\016\041\033\017\034\015\035\055\036\030\037" +
    "\025\040\047\041\011\042\050\043\042\046\020\001\002" +
    "\000\012\005\uffe8\010\uffe8\011\uffe8\014\uffe8\001\002\000" +
    "\042\004\uffeb\005\uffeb\010\uffeb\011\uffeb\014\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\031\uffeb\032\uffeb\044\uffeb\001\002\000\004\035\075" +
    "\001\002\000\004\045\uffba\001\002\000\004\045\uffbd\001" +
    "\002\000\006\010\072\045\uffb9\001\002\000\004\045\uffbb" +
    "\001\002\000\024\004\014\034\015\035\055\036\030\037" +
    "\025\040\047\041\011\042\050\043\042\001\002\000\024" +
    "\004\014\034\015\035\055\036\030\037\025\040\047\041" +
    "\011\042\050\043\042\001\002\000\030\005\uffd6\010\uffd6" +
    "\011\uffd6\014\uffd6\020\102\021\103\026\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\044\uffd6\001\002\000\024\004\057\034\015" +
    "\035\055\036\030\037\025\040\047\041\011\042\050\043" +
    "\042\001\002\000\024\004\057\034\015\035\055\036\030" +
    "\037\025\040\047\041\011\042\050\043\042\001\002\000" +
    "\036\005\uffd3\010\uffd3\011\uffd3\014\uffd3\020\uffd3\021\uffd3" +
    "\022\106\023\107\024\105\026\uffd3\027\uffd3\031\uffd3\032" +
    "\uffd3\044\uffd3\001\002\000\024\004\057\034\015\035\055" +
    "\036\030\037\025\040\047\041\011\042\050\043\042\001" +
    "\002\000\024\004\057\034\015\035\055\036\030\037\025" +
    "\040\047\041\011\042\050\043\042\001\002\000\024\004" +
    "\057\034\015\035\055\036\030\037\025\040\047\041\011" +
    "\042\050\043\042\001\002\000\040\005\uffcf\010\uffcf\011" +
    "\uffcf\014\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\054\026\uffcf\027\uffcf\031\uffcf\032\uffcf\044\uffcf\001" +
    "\002\000\040\005\uffd0\010\uffd0\011\uffd0\014\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\054\026\uffd0\027" +
    "\uffd0\031\uffd0\032\uffd0\044\uffd0\001\002\000\040\005\uffce" +
    "\010\uffce\011\uffce\014\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\054\026\uffce\027\uffce\031\uffce\032\uffce" +
    "\044\uffce\001\002\000\036\005\uffd4\010\uffd4\011\uffd4\014" +
    "\uffd4\020\uffd4\021\uffd4\022\106\023\107\024\105\026\uffd4" +
    "\027\uffd4\031\uffd4\032\uffd4\044\uffd4\001\002\000\030\005" +
    "\uffd7\010\uffd7\011\uffd7\014\uffd7\020\102\021\103\026\uffd7" +
    "\027\uffd7\031\uffd7\032\uffd7\044\uffd7\001\002\000\036\004" +
    "\014\006\033\013\034\016\041\033\017\034\015\035\055" +
    "\036\030\037\025\040\047\041\011\042\050\043\042\046" +
    "\020\001\002\000\004\011\117\001\002\000\050\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\013\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8\001\002\000" +
    "\036\004\014\006\033\013\034\016\041\033\017\034\015" +
    "\035\055\036\030\037\025\040\047\041\011\042\050\043" +
    "\042\046\020\001\002\000\010\005\uffb9\012\uffb9\035\122" +
    "\001\002\000\010\005\uffec\010\uffec\012\uffec\001\002\000" +
    "\010\005\uffef\010\134\012\uffef\001\002\000\006\005\126" +
    "\012\127\001\002\000\006\005\uffee\012\uffee\001\002\000" +
    "\036\004\014\006\033\013\034\016\041\033\017\034\015" +
    "\035\055\036\030\037\025\040\047\041\011\042\050\043" +
    "\042\046\020\001\002\000\004\035\130\001\002\000\004" +
    "\005\131\001\002\000\036\004\014\006\033\013\034\016" +
    "\041\033\017\034\015\035\055\036\030\037\025\040\047" +
    "\041\011\042\050\043\042\046\020\001\002\000\012\005" +
    "\ufff1\010\ufff1\011\ufff1\014\ufff1\001\002\000\012\005\ufff2" +
    "\010\ufff2\011\ufff2\014\ufff2\001\002\000\004\035\135\001" +
    "\002\000\010\005\uffed\010\uffed\012\uffed\001\002\000\012" +
    "\005\ufff0\010\ufff0\011\ufff0\014\ufff0\001\002\000\040\004" +
    "\014\006\033\011\uffb9\013\034\016\041\033\017\034\015" +
    "\035\055\036\030\037\025\040\047\041\011\042\050\043" +
    "\042\046\020\001\002\000\004\011\ufff9\001\002\000\006" +
    "\005\uffb9\035\142\001\002\000\004\045\155\001\002\000" +
    "\004\005\uffe3\001\002\000\006\005\uffb9\010\150\001\002" +
    "\000\004\005\146\001\002\000\036\004\014\006\033\013" +
    "\034\016\041\033\017\034\015\035\055\036\030\037\025" +
    "\040\047\041\011\042\050\043\042\046\020\001\002\000" +
    "\004\011\uffe6\001\002\000\004\035\142\001\002\000\004" +
    "\005\uffe1\001\002\000\004\005\uffe4\001\002\000\006\005" +
    "\uffb9\010\150\001\002\000\004\005\uffe2\001\002\000\036" +
    "\004\014\006\033\013\034\016\041\033\017\034\015\035" +
    "\055\036\030\037\025\040\047\041\011\042\050\043\042" +
    "\046\020\001\002\000\006\005\uffe5\010\uffe5\001\002\000" +
    "\004\014\160\001\002\000\012\005\uffe0\010\uffe0\011\uffe0" +
    "\014\uffe0\001\002\000\046\004\014\006\033\007\162\013" +
    "\034\015\043\016\041\017\037\033\017\034\015\035\051" +
    "\036\030\037\025\040\047\041\011\042\050\043\042\045" +
    "\uffb9\046\020\001\002\000\012\005\ufff3\010\ufff3\011\ufff3" +
    "\014\ufff3\001\002\000\050\002\uffff\004\uffff\006\uffff\007" +
    "\uffff\013\uffff\015\uffff\016\uffff\017\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\045\uffff\046\uffff\001\002\000\026\004\014\033\017" +
    "\034\015\035\055\036\030\037\025\040\047\041\011\042" +
    "\050\043\042\001\002\000\026\004\014\033\017\034\015" +
    "\035\055\036\030\037\025\040\047\041\011\042\050\043" +
    "\042\001\002\000\016\005\uffdd\010\uffdd\011\uffdd\014\uffdd" +
    "\031\uffdd\032\uffdd\001\002\000\016\005\uffde\010\uffde\011" +
    "\uffde\014\uffde\031\uffde\032\uffde\001\002\000\050\002\ufffa" +
    "\004\ufffa\006\ufffa\007\ufffa\013\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\045\ufffa\046\ufffa\001\002\000" +
    "\050\002\ufffb\004\ufffb\006\ufffb\007\ufffb\013\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb" +
    "\001\002\000\050\002\ufffc\004\ufffc\006\ufffc\007\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\045" +
    "\ufffc\046\ufffc\001\002\000\024\004\014\034\015\035\055" +
    "\036\030\037\025\040\047\041\011\042\050\043\042\001" +
    "\002\000\024\005\uffd9\010\uffd9\011\uffd9\014\uffd9\020\102" +
    "\021\103\031\uffd9\032\uffd9\044\uffd9\001\002\000\020\005" +
    "\uffdb\010\uffdb\011\uffdb\014\uffdb\031\uffdb\032\uffdb\044\173" +
    "\001\002\000\024\004\014\034\015\035\055\036\030\037" +
    "\025\040\047\041\011\042\050\043\042\001\002\000\010" +
    "\005\200\020\102\021\103\001\002\000\030\005\uffd2\010" +
    "\uffd2\011\uffd2\014\uffd2\020\uffd2\021\uffd2\026\uffd2\027\uffd2" +
    "\031\uffd2\032\uffd2\044\uffd2\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\062\002\004\003\007\004\052\005\021\006" +
    "\012\007\023\010\022\011\015\014\034\015\026\016\043" +
    "\017\051\020\035\021\031\022\020\023\025\024\030\025" +
    "\006\026\044\027\045\030\037\035\005\036\011\041\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\162\005\021\006\012" +
    "\007\023\010\022\011\015\014\034\015\026\016\043\017" +
    "\051\020\035\021\031\022\020\023\025\024\030\025\006" +
    "\026\044\027\045\030\037\035\005\036\011\041\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\010\057\011\015\014\034\015\026\016\043\017" +
    "\051\020\035\021\031\022\020\023\025\024\030\025\006" +
    "\026\044\027\045\035\005\036\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\026\016\043\017\051" +
    "\020\035\021\031\022\174\025\006\026\044\027\045\036" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\160\004" +
    "\052\005\021\006\012\007\023\010\022\011\015\014\034" +
    "\015\026\016\043\017\051\020\035\021\031\022\020\023" +
    "\025\024\030\025\006\026\044\027\045\030\037\035\005" +
    "\036\011\041\003\001\001\000\050\010\065\011\015\012" +
    "\156\013\063\014\034\015\026\016\043\017\051\020\035" +
    "\021\031\022\020\023\025\024\030\025\006\026\044\027" +
    "\045\035\005\036\011\041\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\073\041\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\055\020" +
    "\035\025\006\026\044\036\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\057\011\015\014\034\015" +
    "\026\016\043\017\051\020\035\021\031\022\020\023\025" +
    "\024\030\025\006\026\044\027\045\035\005\036\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\010\065" +
    "\011\015\012\062\013\063\014\034\015\026\016\043\017" +
    "\051\020\035\021\031\022\020\023\025\024\030\025\006" +
    "\026\044\027\045\035\005\036\011\041\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\067\011\015\014\034\015\026\016" +
    "\043\017\051\020\035\021\031\022\020\023\025\024\030" +
    "\025\006\026\044\027\045\035\005\036\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\075\041\072\001" +
    "\001\000\002\001\001\000\022\015\026\016\043\017\051" +
    "\020\035\021\113\025\006\026\044\036\011\001\001\000" +
    "\022\015\026\016\043\017\051\020\035\021\100\025\006" +
    "\026\044\036\011\001\001\000\002\001\001\000\020\015" +
    "\112\016\043\017\051\020\035\025\006\026\044\036\011" +
    "\001\001\000\020\015\103\016\043\017\051\020\035\025" +
    "\006\026\044\036\011\001\001\000\002\001\001\000\016" +
    "\016\043\017\111\020\035\025\006\026\044\036\011\001" +
    "\001\000\016\016\043\017\110\020\035\025\006\026\044" +
    "\036\011\001\001\000\016\016\043\017\107\020\035\025" +
    "\006\026\044\036\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\010\115\011\015\014\034\015\026\016\043" +
    "\017\051\020\035\021\031\022\020\023\025\024\030\025" +
    "\006\026\044\027\045\035\005\036\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\010\135\011\015\014" +
    "\034\015\026\016\043\017\051\020\035\021\031\022\020" +
    "\023\025\024\030\025\006\026\044\027\045\035\005\036" +
    "\011\001\001\000\010\037\123\040\122\041\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\010\132\011\015\014\034\015\026" +
    "\016\043\017\051\020\035\021\031\022\020\023\025\024" +
    "\030\025\006\026\044\027\045\035\005\036\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\131\011" +
    "\015\014\034\015\026\016\043\017\051\020\035\021\031" +
    "\022\020\023\025\024\030\025\006\026\044\027\045\035" +
    "\005\036\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\010\065\011\015\012\137\013\063\014\034\015\026" +
    "\016\043\017\051\020\035\021\031\022\020\023\025\024" +
    "\030\025\006\026\044\027\045\035\005\036\011\041\064" +
    "\001\001\000\002\001\001\000\010\032\144\034\143\041" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\151\041\150\001\001\000\002\001\001\000\042\010" +
    "\146\011\015\014\034\015\026\016\043\017\051\020\035" +
    "\021\031\022\020\023\025\024\030\025\006\026\044\027" +
    "\045\035\005\036\011\001\001\000\002\001\001\000\004" +
    "\034\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\153\041\150\001\001\000\002\001\001\000\042" +
    "\010\155\011\015\014\034\015\026\016\043\017\051\020" +
    "\035\021\031\022\020\023\025\024\030\025\006\026\044" +
    "\027\045\035\005\036\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\004\162\005\021" +
    "\006\012\007\023\010\022\011\015\014\034\015\026\016" +
    "\043\017\051\020\035\021\031\022\020\023\025\024\030" +
    "\025\006\026\044\027\045\030\037\035\005\036\011\041" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\026\016\043\017\051\020\035\021\031\022\020\023" +
    "\166\025\006\026\044\027\045\036\011\001\001\000\030" +
    "\015\026\016\043\017\051\020\035\021\031\022\020\023" +
    "\165\025\006\026\044\027\045\036\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\026\016\043\017\051" +
    "\020\035\021\173\025\006\026\044\036\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\026\016\043" +
    "\017\051\020\035\021\176\025\006\026\044\036\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // varAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("varAux",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // varAux ::= COMMA VAR varAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> vl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  vl.add(0,v);
		  RESULT = vl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("varAux",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vars ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vars",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vars ::= VAR varAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> vl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		vl.add(0,v);
		RESULT = vl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vars",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // value ::= REAL 
            {
              Exp RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(rlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bool ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBool(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bool",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bool ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBool(t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bool",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // charLit ::= UNI 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpChar(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // charLit ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // charLit ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpChar(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= procCall 
            {
              Exp RESULT =null;
		int pcallleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pcallright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp pcall = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pcall; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= VAR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= charLit 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= bool 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= value 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // power ::= power POWER factor 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpPow(p, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpMod(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpDiv(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpMul(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithExp ::= LPAREN MINUS arithExp RPAREN 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new ExpNeg(ae); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bitOp ::= arithExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bitOp ::= bitOp BOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBOr(b,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bitOp ::= bitOp BAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBAnd(b,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= bitOp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = b;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relop ::= relop RELOP arithExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpRelOp(r,ae,sign);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // negation ::= relop 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("negation",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // negation ::= NOT relop 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNot(r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("negation",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logop ::= negation 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logop ::= logop OR negation 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpOr(l, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logop ::= logop AND negation 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpAnd(l, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listExp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listExp ::= LSQUARE expListE RSQUARE 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binding ::= VAR ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              Statement RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				ArrayList<Exp> ls = new ArrayList<>(); 
				ls.add(e);
				RESULT = ls; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				pl.add(e); 
				RESULT = pl; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procCall ::= factor LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp id = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new ExpProcCall(id, list);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procCall",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
					ArrayList<String> lst = new ArrayList<>();
					lst.add(v);
					RESULT = lst; 
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					params.add(v);
					RESULT = params;
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = params; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procDefn ::= PROC VAR expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcSingle(v, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procDefn ::= PROC LPAREN paramListE PERIOD VAR RPAREN expression 
            {
              Exp RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String rest = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcMulti(params, rest, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procDefn ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcN(params, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // compoundExp ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = body; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("compoundExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= listExp 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp le = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = le; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= procDefn 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = proc; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= compoundExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= logop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= DEF VAR expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new StmtDefinition(v, e);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= vars ASSIGN expListE 
            {
              StmtAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   			RESULT = new StmtAssignment(v, e);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= letStmt SEMI 
            {
              Statement RESULT =null;
		int lSleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement lS = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = lS; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= assignment SEMI 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtAssignment a = (StmtAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new StmtSequence(s);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					lst.add(s); 
					RESULT = lst;
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

