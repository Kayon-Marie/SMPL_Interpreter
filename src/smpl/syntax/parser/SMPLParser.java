
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 02 20:24:39 EST 2020
//----------------------------------------------------

package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.syntax.lexer.SMPLLexer;
import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 02 20:24:39 EST 2020
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\005\005\000\002\006\006\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\015\011\000\002\016\007\000\002\037\007" +
    "\000\002\040\003\000\002\040\003\000\002\041\005\000" +
    "\002\041\003\000\002\042\005\000\002\042\003\000\002" +
    "\014\005\000\002\043\007\000\002\043\011\000\002\043" +
    "\005\000\002\045\003\000\002\045\003\000\002\046\005" +
    "\000\002\046\003\000\002\044\006\000\002\012\003\000" +
    "\002\012\003\000\002\013\005\000\002\013\003\000\002" +
    "\007\007\000\002\036\005\000\002\034\004\000\002\034" +
    "\003\000\002\035\005\000\002\035\003\000\002\011\005" +
    "\000\002\011\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\025\004\000\002\025\003\000\002" +
    "\024\005\000\002\024\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\006\000\002\023\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\021\005\000\002\021\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\027\003\000\002\027\003\000\002" +
    "\022\003\000\002\022\003\000\002\032\004\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\047\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\050\004\014\006\035\014\036\016\047\017" +
    "\045\020\043\021\016\022\041\037\020\040\015\041\055" +
    "\042\032\043\027\044\053\045\011\046\054\047\046\051" +
    "\uffae\052\021\001\002\000\004\051\uffb1\001\002\000\004" +
    "\002\221\001\002\000\042\004\uffbe\005\uffbe\010\uffbe\011" +
    "\uffbe\015\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\050\uffbe\001" +
    "\002\000\012\005\ufff3\010\ufff3\011\ufff3\015\ufff3\001\002" +
    "\000\052\002\001\004\014\006\035\014\036\016\047\017" +
    "\045\020\043\021\016\022\041\037\020\040\015\041\055" +
    "\042\032\043\027\044\053\045\011\046\054\047\046\051" +
    "\uffae\052\021\001\002\000\042\004\uffb9\005\uffb9\010\uffb9" +
    "\011\uffb9\015\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\050\uffb9" +
    "\001\002\000\042\004\uffbb\005\uffbb\010\uffbb\011\uffbb\015" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\035\uffbb\036\uffbb\050\uffbb\001\002\000" +
    "\054\002\ufffd\004\ufffd\006\ufffd\007\ufffd\014\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\051\ufffd\052\ufffd\001\002\000\040\004\014\006\035\014" +
    "\036\017\045\025\216\037\020\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\052\021\001" +
    "\002\000\042\004\uffb4\005\uffb4\010\uffb4\011\uffb4\015\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\035\uffb4\036\uffb4\050\uffb4\001\002\000\004" +
    "\004\210\001\002\000\012\005\ufff2\010\ufff2\011\ufff2\015" +
    "\ufff2\001\002\000\024\004\014\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\001\002\000" +
    "\012\005\uffd4\010\uffd4\011\uffd4\015\uffd4\001\002\000\004" +
    "\011\206\001\002\000\020\005\uffcf\010\uffcf\011\uffcf\015" +
    "\uffcf\035\uffcf\036\uffcf\050\166\001\002\000\004\011\205" +
    "\001\002\000\004\011\204\001\002\000\004\011\203\001" +
    "\002\000\042\004\uffb6\005\uffb6\010\uffb6\011\uffb6\015\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\035\uffb6\036\uffb6\050\uffb6\001\002\000\016" +
    "\005\uffd1\010\uffd1\011\uffd1\015\uffd1\035\uffd1\036\uffd1\001" +
    "\002\000\036\005\uffc6\010\uffc6\011\uffc6\015\uffc6\024\uffc6" +
    "\025\uffc6\026\112\027\113\030\111\032\uffc6\033\uffc6\035" +
    "\uffc6\036\uffc6\050\uffc6\001\002\000\042\004\uffb3\005\uffb3" +
    "\010\uffb3\011\uffb3\015\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3" +
    "\050\uffb3\001\002\000\016\005\ufff5\010\ufff5\011\ufff5\015" +
    "\ufff5\035\177\036\200\001\002\000\030\005\uffca\010\uffca" +
    "\011\uffca\015\uffca\024\106\025\107\032\uffca\033\uffca\035" +
    "\uffca\036\uffca\050\uffca\001\002\000\050\004\014\006\035" +
    "\014\036\016\047\017\045\020\043\021\016\022\041\037" +
    "\020\040\015\041\055\042\032\043\027\044\053\045\011" +
    "\046\054\047\046\051\uffae\052\021\001\002\000\040\004" +
    "\014\006\035\014\036\015\uffae\017\045\037\020\040\015" +
    "\041\061\042\032\043\027\044\053\045\011\046\054\047" +
    "\046\052\021\001\002\000\004\011\171\001\002\000\012" +
    "\005\ufff4\010\ufff4\011\ufff4\015\ufff4\001\002\000\004\004" +
    "\163\001\002\000\042\004\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\015\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\050\uffbf\001\002" +
    "\000\004\004\145\001\002\000\004\051\143\001\002\000" +
    "\006\004\125\041\124\001\002\000\042\004\uffb8\005\uffb8" +
    "\010\uffb8\011\uffb8\015\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8" +
    "\050\uffb8\001\002\000\004\041\121\001\002\000\042\004" +
    "\066\005\uffc0\010\uffc0\011\uffc0\015\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035" +
    "\uffc0\036\uffc0\050\uffc0\001\002\000\042\004\uffbd\005\uffbd" +
    "\010\uffbd\011\uffbd\015\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd" +
    "\050\uffbd\001\002\000\024\005\uffcd\010\uffcd\011\uffcd\015" +
    "\uffcd\032\103\033\104\035\uffcd\036\uffcd\050\uffcd\001\002" +
    "\000\042\004\uffb5\005\uffb5\010\uffb5\011\uffb5\015\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\035\uffb5\036\uffb5\050\uffb5\001\002\000\042\004" +
    "\uffb7\005\uffb7\010\uffb7\011\uffb7\015\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035" +
    "\uffb7\036\uffb7\050\uffb7\001\002\000\040\004\uffbc\010\076" +
    "\011\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc\050\uffbc\051\uffae" +
    "\001\002\000\040\005\uffc2\010\uffc2\011\uffc2\015\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\060\032\uffc2" +
    "\033\uffc2\035\uffc2\036\uffc2\050\uffc2\001\002\000\054\002" +
    "\ufffe\004\ufffe\006\ufffe\007\ufffe\014\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\037\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe" +
    "\052\ufffe\001\002\000\024\004\063\040\015\041\061\042" +
    "\032\043\027\044\053\045\011\046\054\047\046\001\002" +
    "\000\042\004\uffbc\005\uffbc\010\uffbc\011\uffbc\015\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\035\uffbc\036\uffbc\050\uffbc\001\002\000\042\004" +
    "\066\005\uffc1\010\uffc1\011\uffc1\015\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035" +
    "\uffc1\036\uffc1\050\uffc1\001\002\000\036\004\014\006\035" +
    "\014\036\017\045\037\020\040\015\041\061\042\032\043" +
    "\027\044\053\045\011\046\054\047\046\052\021\001\002" +
    "\000\004\005\065\001\002\000\042\004\uffba\005\uffba\010" +
    "\uffba\011\uffba\015\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba\036\uffba\050" +
    "\uffba\001\002\000\040\004\014\005\uffae\006\035\014\036" +
    "\017\045\037\020\040\015\041\061\042\032\043\027\044" +
    "\053\045\011\046\054\047\046\052\021\001\002\000\004" +
    "\005\075\001\002\000\010\005\uffde\011\uffde\015\uffde\001" +
    "\002\000\012\005\uffdf\010\073\011\uffdf\015\uffdf\001\002" +
    "\000\012\005\uffdc\010\uffdc\011\uffdc\015\uffdc\001\002\000" +
    "\036\004\014\006\035\014\036\017\045\037\020\040\015" +
    "\041\061\042\032\043\027\044\053\045\011\046\054\047" +
    "\046\052\021\001\002\000\012\005\uffdd\010\uffdd\011\uffdd" +
    "\015\uffdd\001\002\000\042\004\uffe0\005\uffe0\010\uffe0\011" +
    "\uffe0\015\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\050\uffe0\001" +
    "\002\000\004\041\101\001\002\000\004\051\uffaf\001\002" +
    "\000\004\051\uffb2\001\002\000\006\010\076\051\uffae\001" +
    "\002\000\004\051\uffb0\001\002\000\024\004\014\040\015" +
    "\041\061\042\032\043\027\044\053\045\011\046\054\047" +
    "\046\001\002\000\024\004\014\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\001\002\000" +
    "\030\005\uffcb\010\uffcb\011\uffcb\015\uffcb\024\106\025\107" +
    "\032\uffcb\033\uffcb\035\uffcb\036\uffcb\050\uffcb\001\002\000" +
    "\024\004\063\040\015\041\061\042\032\043\027\044\053" +
    "\045\011\046\054\047\046\001\002\000\024\004\063\040" +
    "\015\041\061\042\032\043\027\044\053\045\011\046\054" +
    "\047\046\001\002\000\036\005\uffc8\010\uffc8\011\uffc8\015" +
    "\uffc8\024\uffc8\025\uffc8\026\112\027\113\030\111\032\uffc8" +
    "\033\uffc8\035\uffc8\036\uffc8\050\uffc8\001\002\000\024\004" +
    "\063\040\015\041\061\042\032\043\027\044\053\045\011" +
    "\046\054\047\046\001\002\000\024\004\063\040\015\041" +
    "\061\042\032\043\027\044\053\045\011\046\054\047\046" +
    "\001\002\000\024\004\063\040\015\041\061\042\032\043" +
    "\027\044\053\045\011\046\054\047\046\001\002\000\040" +
    "\005\uffc4\010\uffc4\011\uffc4\015\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\060\032\uffc4\033\uffc4\035\uffc4" +
    "\036\uffc4\050\uffc4\001\002\000\040\005\uffc5\010\uffc5\011" +
    "\uffc5\015\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\060\032\uffc5\033\uffc5\035\uffc5\036\uffc5\050\uffc5\001" +
    "\002\000\040\005\uffc3\010\uffc3\011\uffc3\015\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\060\032\uffc3\033" +
    "\uffc3\035\uffc3\036\uffc3\050\uffc3\001\002\000\036\005\uffc9" +
    "\010\uffc9\011\uffc9\015\uffc9\024\uffc9\025\uffc9\026\112\027" +
    "\113\030\111\032\uffc9\033\uffc9\035\uffc9\036\uffc9\050\uffc9" +
    "\001\002\000\030\005\uffcc\010\uffcc\011\uffcc\015\uffcc\024" +
    "\106\025\107\032\uffcc\033\uffcc\035\uffcc\036\uffcc\050\uffcc" +
    "\001\002\000\036\004\014\006\035\014\036\017\045\037" +
    "\020\040\015\041\061\042\032\043\027\044\053\045\011" +
    "\046\054\047\046\052\021\001\002\000\004\011\123\001" +
    "\002\000\054\002\ufff6\004\ufff6\006\ufff6\007\ufff6\014\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\051\ufff6\052\ufff6\001\002\000\036\004\014\006" +
    "\035\014\036\017\045\037\020\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\052\021\001" +
    "\002\000\010\005\uffae\012\uffae\041\126\001\002\000\010" +
    "\005\uffe1\010\uffe1\012\uffe1\001\002\000\010\005\uffe4\010" +
    "\140\012\uffe4\001\002\000\006\005\132\012\133\001\002" +
    "\000\006\005\uffe3\012\uffe3\001\002\000\036\004\014\006" +
    "\035\014\036\017\045\037\020\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\052\021\001" +
    "\002\000\004\041\134\001\002\000\004\005\135\001\002" +
    "\000\036\004\014\006\035\014\036\017\045\037\020\040" +
    "\015\041\061\042\032\043\027\044\053\045\011\046\054" +
    "\047\046\052\021\001\002\000\012\005\uffe6\010\uffe6\011" +
    "\uffe6\015\uffe6\001\002\000\012\005\uffe7\010\uffe7\011\uffe7" +
    "\015\uffe7\001\002\000\004\041\141\001\002\000\010\005" +
    "\uffe2\010\uffe2\012\uffe2\001\002\000\012\005\uffe5\010\uffe5" +
    "\011\uffe5\015\uffe5\001\002\000\040\004\014\006\035\011" +
    "\uffae\014\036\017\045\037\020\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\052\021\001" +
    "\002\000\004\011\ufff7\001\002\000\006\005\uffae\041\146" +
    "\001\002\000\004\051\161\001\002\000\004\005\uffd8\001" +
    "\002\000\006\005\uffae\010\154\001\002\000\004\005\152" +
    "\001\002\000\036\004\014\006\035\014\036\017\045\037" +
    "\020\040\015\041\061\042\032\043\027\044\053\045\011" +
    "\046\054\047\046\052\021\001\002\000\004\011\uffdb\001" +
    "\002\000\004\041\146\001\002\000\004\005\uffd6\001\002" +
    "\000\004\005\uffd9\001\002\000\006\005\uffae\010\154\001" +
    "\002\000\004\005\uffd7\001\002\000\036\004\014\006\035" +
    "\014\036\017\045\037\020\040\015\041\061\042\032\043" +
    "\027\044\053\045\011\046\054\047\046\052\021\001\002" +
    "\000\006\005\uffda\010\uffda\001\002\000\024\004\014\040" +
    "\015\041\061\042\032\043\027\044\053\045\011\046\054" +
    "\047\046\001\002\000\006\005\165\050\166\001\002\000" +
    "\036\004\014\006\035\014\036\017\045\037\020\040\015" +
    "\041\061\042\032\043\027\044\053\045\011\046\054\047" +
    "\046\052\021\001\002\000\024\004\014\040\015\041\061" +
    "\042\032\043\027\044\053\045\011\046\054\047\046\001" +
    "\002\000\024\005\uffce\010\uffce\011\uffce\015\uffce\024\106" +
    "\025\107\035\uffce\036\uffce\050\uffce\001\002\000\004\011" +
    "\ufff0\001\002\000\054\002\ufffa\004\ufffa\006\ufffa\007\ufffa" +
    "\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\051\ufffa\052\ufffa\001\002\000\004\015" +
    "\173\001\002\000\012\005\uffd5\010\uffd5\011\uffd5\015\uffd5" +
    "\001\002\000\052\004\014\006\035\007\175\014\036\016" +
    "\047\017\045\020\043\021\016\022\041\037\020\040\015" +
    "\041\055\042\032\043\027\044\053\045\011\046\054\047" +
    "\046\051\uffae\052\021\001\002\000\012\005\uffe8\010\uffe8" +
    "\011\uffe8\015\uffe8\001\002\000\054\002\uffff\004\uffff\006" +
    "\uffff\007\uffff\014\uffff\016\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\001\002" +
    "\000\026\004\014\037\020\040\015\041\061\042\032\043" +
    "\027\044\053\045\011\046\054\047\046\001\002\000\026" +
    "\004\014\037\020\040\015\041\061\042\032\043\027\044" +
    "\053\045\011\046\054\047\046\001\002\000\016\005\uffd2" +
    "\010\uffd2\011\uffd2\015\uffd2\035\uffd2\036\uffd2\001\002\000" +
    "\016\005\uffd3\010\uffd3\011\uffd3\015\uffd3\035\uffd3\036\uffd3" +
    "\001\002\000\054\002\ufff8\004\ufff8\006\ufff8\007\ufff8\014" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\051\ufff8\052\ufff8\001\002\000\054\002\ufffb" +
    "\004\ufffb\006\ufffb\007\ufffb\014\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb\052" +
    "\ufffb\001\002\000\054\002\ufffc\004\ufffc\006\ufffc\007\ufffc" +
    "\014\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\051\ufffc\052\ufffc\001\002\000\054\002" +
    "\ufff9\004\ufff9\006\ufff9\007\ufff9\014\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9" +
    "\052\ufff9\001\002\000\020\005\uffd0\010\uffd0\011\uffd0\015" +
    "\uffd0\035\uffd0\036\uffd0\050\166\001\002\000\004\041\211" +
    "\001\002\000\004\013\212\001\002\000\036\004\014\006" +
    "\035\014\036\017\045\037\020\040\015\041\061\042\032" +
    "\043\027\044\053\045\011\046\054\047\046\052\021\001" +
    "\002\000\004\005\214\001\002\000\036\004\014\006\035" +
    "\014\036\017\045\037\020\040\015\041\061\042\032\043" +
    "\027\044\053\045\011\046\054\047\046\052\021\001\002" +
    "\000\004\011\ufff1\001\002\000\024\004\014\040\015\041" +
    "\061\042\032\043\027\044\053\045\011\046\054\047\046" +
    "\001\002\000\010\005\220\024\106\025\107\001\002\000" +
    "\030\005\uffc7\010\uffc7\011\uffc7\015\uffc7\024\uffc7\025\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\050\uffc7\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\066\002\004\003\007\004\056\005\023\006" +
    "\012\007\025\010\024\011\016\014\037\015\036\016\021" +
    "\017\030\020\047\021\055\022\041\023\033\024\022\025" +
    "\027\026\032\027\005\030\050\031\051\032\043\043\006" +
    "\044\011\047\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\175" +
    "\005\023\006\012\007\025\010\024\011\016\014\037\015" +
    "\036\016\021\017\030\020\047\021\055\022\041\023\033" +
    "\024\022\025\027\026\032\027\005\030\050\031\051\032" +
    "\043\043\006\044\011\047\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\063\011" +
    "\016\014\037\017\030\020\047\021\055\022\041\023\033" +
    "\024\022\025\027\026\032\027\005\030\050\031\051\043" +
    "\006\044\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\030\020\047\021\055\022" +
    "\041\023\033\024\206\027\005\030\050\031\051\044\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\173\004\056\005\023\006\012\007\025\010\024\011" +
    "\016\014\037\015\036\016\021\017\030\020\047\021\055" +
    "\022\041\023\033\024\022\025\027\026\032\027\005\030" +
    "\050\031\051\032\043\043\006\044\011\047\003\001\001" +
    "\000\050\010\071\011\016\012\171\013\070\014\037\017" +
    "\030\020\047\021\055\022\041\023\033\024\022\025\027" +
    "\026\032\027\005\030\050\031\051\043\006\044\011\047" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\077\047\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\061\022\041\027\005\030\050\044\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\010\063\011\016\014" +
    "\037\017\030\020\047\021\055\022\041\023\033\024\022" +
    "\025\027\026\032\027\005\030\050\031\051\043\006\044" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\010\071\011\016\012\066\013\070\014\037\017\030\020" +
    "\047\021\055\022\041\023\033\024\022\025\027\026\032" +
    "\027\005\030\050\031\051\043\006\044\011\047\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\073\011\016\014\037\017" +
    "\030\020\047\021\055\022\041\023\033\024\022\025\027" +
    "\026\032\027\005\030\050\031\051\043\006\044\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\101\047" +
    "\076\001\001\000\002\001\001\000\022\017\030\020\047" +
    "\021\055\022\041\023\117\027\005\030\050\044\011\001" +
    "\001\000\022\017\030\020\047\021\055\022\041\023\104" +
    "\027\005\030\050\044\011\001\001\000\002\001\001\000" +
    "\020\017\116\020\047\021\055\022\041\027\005\030\050" +
    "\044\011\001\001\000\020\017\107\020\047\021\055\022" +
    "\041\027\005\030\050\044\011\001\001\000\002\001\001" +
    "\000\016\020\047\021\115\022\041\027\005\030\050\044" +
    "\011\001\001\000\016\020\047\021\114\022\041\027\005" +
    "\030\050\044\011\001\001\000\016\020\047\021\113\022" +
    "\041\027\005\030\050\044\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\010\121\011\016\014\037\017\030" +
    "\020\047\021\055\022\041\023\033\024\022\025\027\026" +
    "\032\027\005\030\050\031\051\043\006\044\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\141\011" +
    "\016\014\037\017\030\020\047\021\055\022\041\023\033" +
    "\024\022\025\027\026\032\027\005\030\050\031\051\043" +
    "\006\044\011\001\001\000\010\045\127\046\126\047\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\010\136\011\016\014\037" +
    "\017\030\020\047\021\055\022\041\023\033\024\022\025" +
    "\027\026\032\027\005\030\050\031\051\043\006\044\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\010" +
    "\135\011\016\014\037\017\030\020\047\021\055\022\041" +
    "\023\033\024\022\025\027\026\032\027\005\030\050\031" +
    "\051\043\006\044\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\010\071\011\016\012\143\013\070\014\037" +
    "\017\030\020\047\021\055\022\041\023\033\024\022\025" +
    "\027\026\032\027\005\030\050\031\051\043\006\044\011" +
    "\047\067\001\001\000\002\001\001\000\010\034\150\036" +
    "\147\047\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\155\047\154\001\001\000\002\001\001\000" +
    "\042\010\152\011\016\014\037\017\030\020\047\021\055" +
    "\022\041\023\033\024\022\025\027\026\032\027\005\030" +
    "\050\031\051\043\006\044\011\001\001\000\002\001\001" +
    "\000\004\036\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\157\047\154\001\001\000\002\001\001" +
    "\000\042\010\161\011\016\014\037\017\030\020\047\021" +
    "\055\022\041\023\033\024\022\025\027\026\032\027\005" +
    "\030\050\031\051\043\006\044\011\001\001\000\002\001" +
    "\001\000\026\017\030\020\047\021\055\022\041\023\033" +
    "\024\163\027\005\030\050\031\051\044\011\001\001\000" +
    "\002\001\001\000\042\010\167\011\016\014\037\017\030" +
    "\020\047\021\055\022\041\023\033\024\022\025\027\026" +
    "\032\027\005\030\050\031\051\043\006\044\011\001\001" +
    "\000\022\017\030\020\047\021\055\022\041\023\166\027" +
    "\005\030\050\044\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\175\005\023\006\012\007\025\010\024" +
    "\011\016\014\037\015\036\016\021\017\030\020\047\021" +
    "\055\022\041\023\033\024\022\025\027\026\032\027\005" +
    "\030\050\031\051\032\043\043\006\044\011\047\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\017\030" +
    "\020\047\021\055\022\041\023\033\024\022\025\201\027" +
    "\005\030\050\031\051\044\011\001\001\000\030\017\030" +
    "\020\047\021\055\022\041\023\033\024\022\025\200\027" +
    "\005\030\050\031\051\044\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\010\212\011\016\014" +
    "\037\017\030\020\047\021\055\022\041\023\033\024\022" +
    "\025\027\026\032\027\005\030\050\031\051\043\006\044" +
    "\011\001\001\000\002\001\001\000\042\010\214\011\016" +
    "\014\037\017\030\020\047\021\055\022\041\023\033\024" +
    "\022\025\027\026\032\027\005\030\050\031\051\043\006" +
    "\044\011\001\001\000\002\001\001\000\022\017\030\020" +
    "\047\021\055\022\041\023\216\027\005\030\050\044\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // varAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("varAux",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varAux ::= COMMA VAR varAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> vl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  vl.add(0,v);
		  RESULT = vl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("varAux",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // vars ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vars",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vars ::= VAR varAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> vl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		vl.add(0,v);
		RESULT = vl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vars",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // value ::= REAL 
            {
              Exp RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(rlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // value ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bool ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBool(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bool ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBool(t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // charLit ::= UNI 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpChar(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // charLit ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // charLit ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpChar(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= procCall 
            {
              Exp RESULT =null;
		int pcallleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pcallright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp pcall = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pcall; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= VAR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= charLit 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= bool 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= value 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // power ::= power POWER factor 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpPow(p, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpMod(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpDiv(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpMul(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arithExp ::= LPAREN MINUS arithExp RPAREN 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new ExpNeg(ae); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bitOp ::= arithExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bitOp ::= bitOp BOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBOr(b,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bitOp ::= bitOp BAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBAnd(b,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relop ::= bitOp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = b;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relop ::= relop RELOP arithExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpRelOp(r,ae,sign);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // negation ::= relop 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("negation",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // negation ::= NOT relop 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNot(r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("negation",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logop ::= negation 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logop ::= logop OR negation 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpOr(l, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logop ::= logop AND negation 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpAnd(l, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listExp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listExp ::= LSQUARE expListE RSQUARE 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binding ::= VAR ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              Statement RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				ArrayList<Exp> ls = new ArrayList<>(); 
				ls.add(e);
				RESULT = ls; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				pl.add(e); 
				RESULT = pl; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procCall ::= factor LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp id = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new ExpProcCall(id, list);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procCall",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
					ArrayList<String> lst = new ArrayList<>();
					lst.add(v);
					RESULT = lst; 
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					params.add(v);
					RESULT = params;
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = params; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procDefn ::= PROC VAR expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcSingle(v, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procDefn ::= PROC LPAREN paramListE PERIOD VAR RPAREN expression 
            {
              Exp RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String rest = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcMulti(params, rest, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procDefn ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcN(params, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compoundExp ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = body; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("compoundExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subVector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subVector",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subVector ::= arithExp COLON expression 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpSubVector(size, proc);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subVector",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // subVectorList ::= subVector 
            {
              ArrayList<Exp> RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp sv = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
						ArrayList<Exp> ls = new ArrayList<>(); 
						ls.add(sv);
						RESULT = ls; 
					
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subVectorList",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // subVectorList ::= subVectorList COMMA subVector 
            {
              ArrayList<Exp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp sv = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
						list.add(sv); 
						RESULT = list; 
					
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subVectorList",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subVectorListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subVectorListE",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subVectorListE ::= subVectorList 
            {
              ArrayList<Exp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = list; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subVectorListE",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vectorExp ::= LSQUARE COLON subVectorListE COLON RSQUARE 
            {
              Exp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
					RESULT = new ExpVector(list);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // whileExp ::= WHILE LPAREN relop RPAREN expression 
            {
              Exp RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpWhile(cond, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("whileExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // forExp ::= FOR LPAREN VAR COLON expression RPAREN expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpFor(v, size, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("forExp",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= listExp 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp le = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = le; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= procDefn 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = proc; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= compoundExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= logop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= DEF VAR expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new StmtDefinition(v, e);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignment ::= vars ASSIGN expListE 
            {
              StmtAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   			RESULT = new StmtAssignment(v, e);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= letStmt SEMI 
            {
              Statement RESULT =null;
		int lSleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement lS = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = lS; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= whileExp SEMI 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp w = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(w); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= forExp SEMI 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= assignment SEMI 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtAssignment a = (StmtAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new StmtSequence(s);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					lst.add(s); 
					RESULT = lst;
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

