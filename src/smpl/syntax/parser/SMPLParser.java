
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 02 20:56:17 EST 2020
//----------------------------------------------------

package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.syntax.lexer.SMPLLexer;
import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.core.Statement;
import smpl.syntax.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 02 20:56:17 EST 2020
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\010\006\000\002\011\010\000\002" +
    "\011\006\000\002\012\006\000\002\025\004\000\002\025" +
    "\003\000\002\024\005\000\002\024\003\000\002\023\005" +
    "\000\002\023\005\000\002\005\005\000\002\006\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\045\007\000\002\020\007" +
    "\000\002\021\007\000\002\017\005\000\002\051\007\000" +
    "\002\051\011\000\002\051\005\000\002\053\003\000\002" +
    "\053\003\000\002\054\005\000\002\054\003\000\002\052" +
    "\006\000\002\015\003\000\002\015\003\000\002\016\005" +
    "\000\002\016\003\000\002\007\007\000\002\044\005\000" +
    "\002\042\004\000\002\042\003\000\002\043\005\000\002" +
    "\043\003\000\002\014\005\000\002\014\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\003\000\002\033\004" +
    "\000\002\033\003\000\002\032\005\000\002\032\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\006\000\002\031" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\027\005\000\002\027\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\035\003" +
    "\000\002\035\003\000\002\030\003\000\002\030\003\000" +
    "\002\040\004\000\002\040\003\000\002\041\005\000\002" +
    "\041\003\000\002\055\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\056\004\016\006\043\014\045\016\055\017" +
    "\054\020\051\021\031\024\015\025\020\026\047\043\022" +
    "\044\017\045\064\046\040\047\034\050\062\051\011\052" +
    "\063\053\053\055\uffa6\056\024\057\023\001\002\000\004" +
    "\055\uffa9\001\002\000\004\002\262\001\002\000\022\005" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\015\uffe9\022\uffe9" +
    "\023\uffe9\001\002\000\052\004\uffb6\005\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\013\uffb6\015\uffb6\022\uffb6\023\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\041\uffb6\042\uffb6\054\uffb6\001\002\000\060\002\001" +
    "\004\016\006\043\014\045\016\055\017\054\020\051\021" +
    "\031\024\015\025\020\026\047\043\022\044\017\045\064" +
    "\046\040\047\034\050\062\051\011\052\063\053\053\055" +
    "\uffa6\056\024\057\023\001\002\000\052\004\uffb1\005\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\013\uffb1\015\uffb1\022\uffb1\023" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\041\uffb1\042\uffb1\054\uffb1\001\002\000" +
    "\004\011\261\001\002\000\052\004\uffb3\005\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\013\uffb3\015\uffb3\022\uffb3\023\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\041\uffb3\042\uffb3\054\uffb3\001\002\000\022\005" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\015\uffe5\022\uffe5" +
    "\023\uffe5\001\002\000\004\006\241\001\002\000\046\004" +
    "\016\006\043\014\045\016\055\017\054\024\015\031\236" +
    "\043\022\044\017\045\070\046\040\047\034\050\062\051" +
    "\011\052\063\053\053\056\024\057\023\001\002\000\052" +
    "\004\uffac\005\uffac\007\uffac\010\uffac\011\uffac\013\uffac\015" +
    "\uffac\022\uffac\023\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\041\uffac\042\uffac\054" +
    "\uffac\001\002\000\004\004\232\001\002\000\022\005\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\015\uffe8\022\uffe8\023" +
    "\uffe8\001\002\000\024\004\016\044\017\045\070\046\040" +
    "\047\034\050\062\051\011\052\063\053\053\001\002\000" +
    "\022\005\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\015\uffcc" +
    "\022\uffcc\023\uffcc\001\002\000\004\004\226\001\002\000" +
    "\004\011\225\001\002\000\030\005\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\013\uffc7\015\uffc7\022\uffc7\023\uffc7\041\uffc7\042" +
    "\uffc7\054\174\001\002\000\004\011\224\001\002\000\022" +
    "\005\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\015\uffe4\022" +
    "\uffe4\023\uffe4\001\002\000\044\004\016\006\043\014\045" +
    "\016\055\017\054\024\015\043\022\044\017\045\070\046" +
    "\040\047\034\050\062\051\011\052\063\053\053\056\024" +
    "\057\023\001\002\000\004\011\216\001\002\000\004\011" +
    "\215\001\002\000\052\004\uffae\005\uffae\007\uffae\010\uffae" +
    "\011\uffae\013\uffae\015\uffae\022\uffae\023\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\041\uffae\042\uffae\054\uffae\001\002\000\026\005\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\015\uffc9\022\uffc9\023\uffc9" +
    "\041\uffc9\042\uffc9\001\002\000\022\005\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\015\uffe6\022\uffe6\023\uffe6\001\002" +
    "\000\046\005\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe\015" +
    "\uffbe\022\uffbe\023\uffbe\030\uffbe\031\uffbe\032\121\033\122" +
    "\034\120\036\uffbe\037\uffbe\041\uffbe\042\uffbe\054\uffbe\001" +
    "\002\000\052\004\uffab\005\uffab\007\uffab\010\uffab\011\uffab" +
    "\013\uffab\015\uffab\022\uffab\023\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\041\uffab" +
    "\042\uffab\054\uffab\001\002\000\026\005\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\013\uffeb\015\uffeb\022\uffeb\023\uffeb\041\211" +
    "\042\212\001\002\000\040\005\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\013\uffc2\015\uffc2\022\uffc2\023\uffc2\030\115\031\116" +
    "\036\uffc2\037\uffc2\041\uffc2\042\uffc2\054\uffc2\001\002\000" +
    "\056\004\016\006\043\014\045\016\055\017\054\020\051" +
    "\021\031\024\015\025\020\026\047\043\022\044\017\045" +
    "\064\046\040\047\034\050\062\051\011\052\063\053\053" +
    "\055\uffa6\056\024\057\023\001\002\000\004\011\205\001" +
    "\002\000\050\004\016\006\043\013\200\014\045\015\uffa6" +
    "\016\055\017\054\024\015\043\022\044\017\045\070\046" +
    "\040\047\034\050\062\051\011\052\063\053\053\056\024" +
    "\057\023\001\002\000\022\005\uffea\007\uffea\010\uffea\011" +
    "\uffea\013\uffea\015\uffea\022\uffea\023\uffea\001\002\000\004" +
    "\004\171\001\002\000\052\004\uffb7\005\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\013\uffb7\015\uffb7\022\uffb7\023\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\042\uffb7\054\uffb7\001\002\000\004\004\153" +
    "\001\002\000\004\055\151\001\002\000\052\004\uffb0\005" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\015\uffb0\022\uffb0" +
    "\023\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\054\uffb0\001\002" +
    "\000\006\004\133\045\132\001\002\000\004\045\130\001" +
    "\002\000\052\004\075\005\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\013\uffb8\015\uffb8\022\uffb8\023\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8" +
    "\042\uffb8\054\uffb8\001\002\000\052\004\uffb5\005\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\013\uffb5\015\uffb5\022\uffb5\023\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\041\uffb5\042\uffb5\054\uffb5\001\002\000\034" +
    "\005\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\022" +
    "\uffc5\023\uffc5\036\112\037\113\041\uffc5\042\uffc5\054\uffc5" +
    "\001\002\000\022\005\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\015\uffe7\022\uffe7\023\uffe7\001\002\000\052\004\uffad" +
    "\005\uffad\007\uffad\010\uffad\011\uffad\013\uffad\015\uffad\022" +
    "\uffad\023\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\041\uffad\042\uffad\054\uffad\001" +
    "\002\000\052\004\uffaf\005\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\013\uffaf\015\uffaf\022\uffaf\023\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf" +
    "\042\uffaf\054\uffaf\001\002\000\040\004\uffb4\010\105\011" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\041\uffb4\042\uffb4\054\uffb4\055\uffa6\001" +
    "\002\000\050\005\uffba\007\uffba\010\uffba\011\uffba\013\uffba" +
    "\015\uffba\022\uffba\023\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\067\036\uffba\037\uffba\041\uffba\042\uffba" +
    "\054\uffba\001\002\000\062\002\ufffe\004\ufffe\006\ufffe\007" +
    "\ufffe\014\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\001\002\000\024\004\072\044\017\045\070\046" +
    "\040\047\034\050\062\051\011\052\063\053\053\001\002" +
    "\000\052\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4\013" +
    "\uffb4\015\uffb4\022\uffb4\023\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4\042" +
    "\uffb4\054\uffb4\001\002\000\052\004\075\005\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\013\uffb9\015\uffb9\022\uffb9\023\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\054\uffb9\001\002\000\044\004" +
    "\016\006\043\014\045\016\055\017\054\024\015\043\022" +
    "\044\017\045\070\046\040\047\034\050\062\051\011\052" +
    "\063\053\053\056\024\057\023\001\002\000\004\005\074" +
    "\001\002\000\052\004\uffb2\005\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\013\uffb2\015\uffb2\022\uffb2\023\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\041" +
    "\uffb2\042\uffb2\054\uffb2\001\002\000\046\004\016\005\uffa6" +
    "\006\043\014\045\016\055\017\054\024\015\043\022\044" +
    "\017\045\070\046\040\047\034\050\062\051\011\052\063" +
    "\053\053\056\024\057\023\001\002\000\012\005\uffd6\011" +
    "\uffd6\013\uffd6\015\uffd6\001\002\000\004\005\104\001\002" +
    "\000\014\005\uffd4\010\uffd4\011\uffd4\013\uffd4\015\uffd4\001" +
    "\002\000\014\005\uffd7\010\102\011\uffd7\013\uffd7\015\uffd7" +
    "\001\002\000\044\004\016\006\043\014\045\016\055\017" +
    "\054\024\015\043\022\044\017\045\070\046\040\047\034" +
    "\050\062\051\011\052\063\053\053\056\024\057\023\001" +
    "\002\000\014\005\uffd5\010\uffd5\011\uffd5\013\uffd5\015\uffd5" +
    "\001\002\000\052\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\013\uffd8\015\uffd8\022\uffd8\023\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\054\uffd8\001\002\000\004\045\110\001\002" +
    "\000\004\055\uffa7\001\002\000\004\055\uffaa\001\002\000" +
    "\006\010\105\055\uffa6\001\002\000\004\055\uffa8\001\002" +
    "\000\024\004\016\044\017\045\070\046\040\047\034\050" +
    "\062\051\011\052\063\053\053\001\002\000\024\004\016" +
    "\044\017\045\070\046\040\047\034\050\062\051\011\052" +
    "\063\053\053\001\002\000\040\005\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\013\uffc3\015\uffc3\022\uffc3\023\uffc3\030\115\031" +
    "\116\036\uffc3\037\uffc3\041\uffc3\042\uffc3\054\uffc3\001\002" +
    "\000\024\004\072\044\017\045\070\046\040\047\034\050" +
    "\062\051\011\052\063\053\053\001\002\000\024\004\072" +
    "\044\017\045\070\046\040\047\034\050\062\051\011\052" +
    "\063\053\053\001\002\000\046\005\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\013\uffc0\015\uffc0\022\uffc0\023\uffc0\030\uffc0\031" +
    "\uffc0\032\121\033\122\034\120\036\uffc0\037\uffc0\041\uffc0" +
    "\042\uffc0\054\uffc0\001\002\000\024\004\072\044\017\045" +
    "\070\046\040\047\034\050\062\051\011\052\063\053\053" +
    "\001\002\000\024\004\072\044\017\045\070\046\040\047" +
    "\034\050\062\051\011\052\063\053\053\001\002\000\024" +
    "\004\072\044\017\045\070\046\040\047\034\050\062\051" +
    "\011\052\063\053\053\001\002\000\050\005\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\013\uffbc\015\uffbc\022\uffbc\023\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\067\036\uffbc" +
    "\037\uffbc\041\uffbc\042\uffbc\054\uffbc\001\002\000\050\005" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\015\uffbd\022\uffbd" +
    "\023\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\067\036\uffbd\037\uffbd\041\uffbd\042\uffbd\054\uffbd\001\002" +
    "\000\050\005\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\015" +
    "\uffbb\022\uffbb\023\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\067\036\uffbb\037\uffbb\041\uffbb\042\uffbb\054" +
    "\uffbb\001\002\000\046\005\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\013\uffc1\015\uffc1\022\uffc1\023\uffc1\030\uffc1\031\uffc1\032" +
    "\121\033\122\034\120\036\uffc1\037\uffc1\041\uffc1\042\uffc1" +
    "\054\uffc1\001\002\000\040\005\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\013\uffc4\015\uffc4\022\uffc4\023\uffc4\030\115\031\116" +
    "\036\uffc4\037\uffc4\041\uffc4\042\uffc4\054\uffc4\001\002\000" +
    "\044\004\016\006\043\014\045\016\055\017\054\024\015" +
    "\043\022\044\017\045\070\046\040\047\034\050\062\051" +
    "\011\052\063\053\053\056\024\057\023\001\002\000\022" +
    "\005\uffec\007\uffec\010\uffec\011\uffec\013\uffec\015\uffec\022" +
    "\uffec\023\uffec\001\002\000\044\004\016\006\043\014\045" +
    "\016\055\017\054\024\015\043\022\044\017\045\070\046" +
    "\040\047\034\050\062\051\011\052\063\053\053\056\024" +
    "\057\023\001\002\000\010\005\uffa6\012\uffa6\045\134\001" +
    "\002\000\010\005\uffd9\010\uffd9\012\uffd9\001\002\000\010" +
    "\005\uffdc\010\146\012\uffdc\001\002\000\006\005\140\012" +
    "\141\001\002\000\006\005\uffdb\012\uffdb\001\002\000\044" +
    "\004\016\006\043\014\045\016\055\017\054\024\015\043" +
    "\022\044\017\045\070\046\040\047\034\050\062\051\011" +
    "\052\063\053\053\056\024\057\023\001\002\000\004\045" +
    "\142\001\002\000\004\005\143\001\002\000\044\004\016" +
    "\006\043\014\045\016\055\017\054\024\015\043\022\044" +
    "\017\045\070\046\040\047\034\050\062\051\011\052\063" +
    "\053\053\056\024\057\023\001\002\000\022\005\uffde\007" +
    "\uffde\010\uffde\011\uffde\013\uffde\015\uffde\022\uffde\023\uffde" +
    "\001\002\000\022\005\uffdf\007\uffdf\010\uffdf\011\uffdf\013" +
    "\uffdf\015\uffdf\022\uffdf\023\uffdf\001\002\000\004\045\147" +
    "\001\002\000\010\005\uffda\010\uffda\012\uffda\001\002\000" +
    "\022\005\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\015\uffdd" +
    "\022\uffdd\023\uffdd\001\002\000\046\004\016\006\043\011" +
    "\uffa6\014\045\016\055\017\054\024\015\043\022\044\017" +
    "\045\070\046\040\047\034\050\062\051\011\052\063\053" +
    "\053\056\024\057\023\001\002\000\004\011\uffed\001\002" +
    "\000\006\005\uffa6\045\154\001\002\000\004\055\167\001" +
    "\002\000\004\005\uffd0\001\002\000\006\005\uffa6\010\162" +
    "\001\002\000\004\005\160\001\002\000\044\004\016\006" +
    "\043\014\045\016\055\017\054\024\015\043\022\044\017" +
    "\045\070\046\040\047\034\050\062\051\011\052\063\053" +
    "\053\056\024\057\023\001\002\000\004\011\uffd3\001\002" +
    "\000\004\045\154\001\002\000\004\005\uffce\001\002\000" +
    "\004\005\uffd1\001\002\000\006\005\uffa6\010\162\001\002" +
    "\000\004\005\uffcf\001\002\000\044\004\016\006\043\014" +
    "\045\016\055\017\054\024\015\043\022\044\017\045\070" +
    "\046\040\047\034\050\062\051\011\052\063\053\053\056" +
    "\024\057\023\001\002\000\006\005\uffd2\010\uffd2\001\002" +
    "\000\024\004\016\044\017\045\070\046\040\047\034\050" +
    "\062\051\011\052\063\053\053\001\002\000\006\005\173" +
    "\054\174\001\002\000\044\004\016\006\043\014\045\016" +
    "\055\017\054\024\015\043\022\044\017\045\070\046\040" +
    "\047\034\050\062\051\011\052\063\053\053\056\024\057" +
    "\023\001\002\000\024\004\016\044\017\045\070\046\040" +
    "\047\034\050\062\051\011\052\063\053\053\001\002\000" +
    "\034\005\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\015\uffc6" +
    "\022\uffc6\023\uffc6\036\112\037\113\041\uffc6\042\uffc6\054" +
    "\uffc6\001\002\000\004\011\uffe1\001\002\000\004\015\204" +
    "\001\002\000\046\004\016\006\043\013\uffa6\014\045\016" +
    "\055\017\054\024\015\043\022\044\017\045\070\046\040" +
    "\047\034\050\062\051\011\052\063\053\053\056\024\057" +
    "\023\001\002\000\004\013\202\001\002\000\004\015\203" +
    "\001\002\000\022\005\uffe3\007\uffe3\010\uffe3\011\uffe3\013" +
    "\uffe3\015\uffe3\022\uffe3\023\uffe3\001\002\000\022\005\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\013\uffcd\015\uffcd\022\uffcd\023" +
    "\uffcd\001\002\000\062\002\ufff9\004\ufff9\006\ufff9\007\ufff9" +
    "\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\001\002\000\060\004\016\006\043\007\207\014\045" +
    "\016\055\017\054\020\051\021\031\024\015\025\020\026" +
    "\047\043\022\044\017\045\064\046\040\047\034\050\062" +
    "\051\011\052\063\053\053\055\uffa6\056\024\057\023\001" +
    "\002\000\022\005\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\015\uffe0\022\uffe0\023\uffe0\001\002\000\062\002\uffff\004" +
    "\uffff\006\uffff\007\uffff\014\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\024\uffff\025\uffff\026\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\055\uffff\056\uffff\057\uffff\001\002\000\026\004\016\043" +
    "\022\044\017\045\070\046\040\047\034\050\062\051\011" +
    "\052\063\053\053\001\002\000\026\004\016\043\022\044" +
    "\017\045\070\046\040\047\034\050\062\051\011\052\063" +
    "\053\053\001\002\000\026\005\uffca\007\uffca\010\uffca\011" +
    "\uffca\013\uffca\015\uffca\022\uffca\023\uffca\041\uffca\042\uffca" +
    "\001\002\000\026\005\uffcb\007\uffcb\010\uffcb\011\uffcb\013" +
    "\uffcb\015\uffcb\022\uffcb\023\uffcb\041\uffcb\042\uffcb\001\002" +
    "\000\062\002\ufffb\004\ufffb\006\ufffb\007\ufffb\014\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\001\002" +
    "\000\062\002\ufffc\004\ufffc\006\ufffc\007\ufffc\014\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002" +
    "\000\004\022\220\001\002\000\044\004\016\006\043\014" +
    "\045\016\055\017\054\024\015\043\022\044\017\045\070" +
    "\046\040\047\034\050\062\051\011\052\063\053\053\056" +
    "\024\057\023\001\002\000\006\011\ufff5\023\222\001\002" +
    "\000\044\004\016\006\043\014\045\016\055\017\054\024" +
    "\015\043\022\044\017\045\070\046\040\047\034\050\062" +
    "\051\011\052\063\053\053\056\024\057\023\001\002\000" +
    "\004\011\ufff6\001\002\000\062\002\ufffd\004\ufffd\006\ufffd" +
    "\007\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\001\002\000\062\002\ufff8\004\ufff8\006\ufff8" +
    "\007\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\001\002\000\046\004\016\005\uffa6\006\043" +
    "\014\045\016\055\017\054\024\015\043\022\044\017\045" +
    "\070\046\040\047\034\050\062\051\011\052\063\053\053" +
    "\056\024\057\023\001\002\000\004\005\230\001\002\000" +
    "\022\005\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\015\ufff7" +
    "\022\ufff7\023\ufff7\001\002\000\030\005\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\013\uffc8\015\uffc8\022\uffc8\023\uffc8\041\uffc8" +
    "\042\uffc8\054\174\001\002\000\044\004\016\006\043\014" +
    "\045\016\055\017\054\024\015\043\022\044\017\045\070" +
    "\046\040\047\034\050\062\051\011\052\063\053\053\056" +
    "\024\057\023\001\002\000\004\005\234\001\002\000\044" +
    "\004\016\006\043\014\045\016\055\017\054\024\015\043" +
    "\022\044\017\045\070\046\040\047\034\050\062\051\011" +
    "\052\063\053\053\056\024\057\023\001\002\000\004\011" +
    "\uffe2\001\002\000\024\004\016\044\017\045\070\046\040" +
    "\047\034\050\062\051\011\052\063\053\053\001\002\000" +
    "\010\005\240\030\115\031\116\001\002\000\040\005\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\013\uffbf\015\uffbf\022\uffbf\023" +
    "\uffbf\030\uffbf\031\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\054\uffbf\001\002\000\050\004\016\006\043\007\uffa6\014" +
    "\045\016\055\017\054\023\246\024\015\043\022\044\017" +
    "\045\070\046\040\047\034\050\062\051\011\052\063\053" +
    "\053\056\024\057\023\001\002\000\004\007\ufff2\001\002" +
    "\000\006\007\uffa6\010\254\001\002\000\004\007\253\001" +
    "\002\000\004\013\251\001\002\000\004\013\247\001\002" +
    "\000\044\004\016\006\043\014\045\016\055\017\054\024" +
    "\015\043\022\044\017\045\070\046\040\047\034\050\062" +
    "\051\011\052\063\053\053\056\024\057\023\001\002\000" +
    "\006\007\uffee\010\uffee\001\002\000\044\004\016\006\043" +
    "\014\045\016\055\017\054\024\015\043\022\044\017\045" +
    "\070\046\040\047\034\050\062\051\011\052\063\053\053" +
    "\056\024\057\023\001\002\000\006\007\uffef\010\uffef\001" +
    "\002\000\022\005\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4" +
    "\015\ufff4\022\ufff4\023\ufff4\001\002\000\046\004\016\006" +
    "\043\014\045\016\055\017\054\023\246\024\015\043\022" +
    "\044\017\045\070\046\040\047\034\050\062\051\011\052" +
    "\063\053\053\056\024\057\023\001\002\000\004\007\ufff3" +
    "\001\002\000\004\007\ufff0\001\002\000\006\007\uffa6\010" +
    "\254\001\002\000\004\007\ufff1\001\002\000\062\002\ufffa" +
    "\004\ufffa\006\ufffa\007\ufffa\014\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\024\ufffa\025\ufffa\026\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\076\002\004\003\007\004\065\005\026\006" +
    "\013\007\032\010\060\011\011\012\035\013\031\014\020" +
    "\017\045\020\043\021\024\022\036\026\055\027\064\030" +
    "\047\031\041\032\025\033\034\034\040\035\006\036\056" +
    "\037\057\040\051\045\027\051\005\052\012\055\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\004\207\005\026\006\013\007" +
    "\032\010\060\011\011\012\035\013\031\014\020\017\045" +
    "\020\043\021\024\022\036\026\055\027\064\030\047\031" +
    "\041\032\025\033\034\034\040\035\006\036\056\037\057" +
    "\040\051\045\027\051\005\052\012\055\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\013\010\060\012" +
    "\035\013\072\014\020\017\045\022\036\026\055\027\064" +
    "\030\047\031\041\032\025\033\034\034\040\035\006\036" +
    "\056\037\057\045\027\051\005\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\022" +
    "\036\026\055\027\064\030\047\031\041\032\230\035\006" +
    "\036\056\037\057\052\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\013\010\060\012" +
    "\035\013\216\014\020\017\045\022\036\026\055\027\064" +
    "\030\047\031\041\032\025\033\034\034\040\035\006\036" +
    "\056\037\057\045\027\051\005\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\003\205\004" +
    "\065\005\026\006\013\007\032\010\060\011\011\012\035" +
    "\013\031\014\020\017\045\020\043\021\024\022\036\026" +
    "\055\027\064\030\047\031\041\032\025\033\034\034\040" +
    "\035\006\036\056\037\057\040\051\045\027\051\005\052" +
    "\012\055\003\001\001\000\002\001\001\000\060\006\013" +
    "\010\060\012\035\013\077\014\020\015\176\016\100\017" +
    "\045\022\036\026\055\027\064\030\047\031\041\032\025" +
    "\033\034\034\040\035\006\036\056\037\057\045\027\051" +
    "\005\052\012\055\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\106\055\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\070\030\047\035\006\036\056\052\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\006" +
    "\013\010\060\012\035\013\072\014\020\017\045\022\036" +
    "\026\055\027\064\030\047\031\041\032\025\033\034\034" +
    "\040\035\006\036\056\037\057\045\027\051\005\052\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\006" +
    "\013\010\060\012\035\013\077\014\020\015\076\016\100" +
    "\017\045\022\036\026\055\027\064\030\047\031\041\032" +
    "\025\033\034\034\040\035\006\036\056\037\057\045\027" +
    "\051\005\052\012\055\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\006\013\010\060\012\035\013\102\014\020\017\045\022" +
    "\036\026\055\027\064\030\047\031\041\032\025\033\034" +
    "\034\040\035\006\036\056\037\057\045\027\051\005\052" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\110\055\105\001\001\000\002\001\001\000\022\022\036" +
    "\026\055\027\064\030\047\031\126\035\006\036\056\052" +
    "\012\001\001\000\022\022\036\026\055\027\064\030\047" +
    "\031\113\035\006\036\056\052\012\001\001\000\002\001" +
    "\001\000\020\022\125\026\055\027\064\030\047\035\006" +
    "\036\056\052\012\001\001\000\020\022\116\026\055\027" +
    "\064\030\047\035\006\036\056\052\012\001\001\000\002" +
    "\001\001\000\016\026\055\027\124\030\047\035\006\036" +
    "\056\052\012\001\001\000\016\026\055\027\123\030\047" +
    "\035\006\036\056\052\012\001\001\000\016\026\055\027" +
    "\122\030\047\035\006\036\056\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\006\013\010\060\012\035" +
    "\013\130\014\020\017\045\022\036\026\055\027\064\030" +
    "\047\031\041\032\025\033\034\034\040\035\006\036\056" +
    "\037\057\045\027\051\005\052\012\001\001\000\002\001" +
    "\001\000\052\006\013\010\060\012\035\013\147\014\020" +
    "\017\045\022\036\026\055\027\064\030\047\031\041\032" +
    "\025\033\034\034\040\035\006\036\056\037\057\045\027" +
    "\051\005\052\012\001\001\000\010\053\135\054\134\055" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\013\010\060\012" +
    "\035\013\144\014\020\017\045\022\036\026\055\027\064" +
    "\030\047\031\041\032\025\033\034\034\040\035\006\036" +
    "\056\037\057\045\027\051\005\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\013\010\060\012" +
    "\035\013\143\014\020\017\045\022\036\026\055\027\064" +
    "\030\047\031\041\032\025\033\034\034\040\035\006\036" +
    "\056\037\057\045\027\051\005\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\006\013\010\060\012\035" +
    "\013\077\014\020\015\151\016\100\017\045\022\036\026" +
    "\055\027\064\030\047\031\041\032\025\033\034\034\040" +
    "\035\006\036\056\037\057\045\027\051\005\052\012\055" +
    "\075\001\001\000\002\001\001\000\010\042\156\044\155" +
    "\055\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\163\055\162\001\001\000\002\001\001\000\052" +
    "\006\013\010\060\012\035\013\160\014\020\017\045\022" +
    "\036\026\055\027\064\030\047\031\041\032\025\033\034" +
    "\034\040\035\006\036\056\037\057\045\027\051\005\052" +
    "\012\001\001\000\002\001\001\000\004\044\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\165\055" +
    "\162\001\001\000\002\001\001\000\052\006\013\010\060" +
    "\012\035\013\167\014\020\017\045\022\036\026\055\027" +
    "\064\030\047\031\041\032\025\033\034\034\040\035\006" +
    "\036\056\037\057\045\027\051\005\052\012\001\001\000" +
    "\002\001\001\000\026\022\036\026\055\027\064\030\047" +
    "\031\041\032\171\035\006\036\056\037\057\052\012\001" +
    "\001\000\002\001\001\000\052\006\013\010\060\012\035" +
    "\013\175\014\020\017\045\022\036\026\055\027\064\030" +
    "\047\031\041\032\025\033\034\034\040\035\006\036\056" +
    "\037\057\045\027\051\005\052\012\001\001\000\024\022" +
    "\036\026\055\027\064\030\047\031\041\035\006\036\056" +
    "\037\174\052\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\006\013\010\060\012\035" +
    "\013\077\014\020\015\200\016\100\017\045\022\036\026" +
    "\055\027\064\030\047\031\041\032\025\033\034\034\040" +
    "\035\006\036\056\037\057\045\027\051\005\052\012\055" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\004" +
    "\207\005\026\006\013\007\032\010\060\011\011\012\035" +
    "\013\031\014\020\017\045\020\043\021\024\022\036\026" +
    "\055\027\064\030\047\031\041\032\025\033\034\034\040" +
    "\035\006\036\056\037\057\040\051\045\027\051\005\052" +
    "\012\055\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\022\036\026\055\027\064\030\047\031\041\032" +
    "\025\033\213\035\006\036\056\037\057\052\012\001\001" +
    "\000\030\022\036\026\055\027\064\030\047\031\041\032" +
    "\025\033\212\035\006\036\056\037\057\052\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\013\010\060" +
    "\012\035\013\220\014\020\017\045\022\036\026\055\027" +
    "\064\030\047\031\041\032\025\033\034\034\040\035\006" +
    "\036\056\037\057\045\027\051\005\052\012\001\001\000" +
    "\002\001\001\000\052\006\013\010\060\012\035\013\222" +
    "\014\020\017\045\022\036\026\055\027\064\030\047\031" +
    "\041\032\025\033\034\034\040\035\006\036\056\037\057" +
    "\045\027\051\005\052\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\006\013\010\060" +
    "\012\035\013\077\014\020\015\226\016\100\017\045\022" +
    "\036\026\055\027\064\030\047\031\041\032\025\033\034" +
    "\034\040\035\006\036\056\037\057\045\027\051\005\052" +
    "\012\055\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\006\013\010\060\012\035\013" +
    "\232\014\020\017\045\022\036\026\055\027\064\030\047" +
    "\031\041\032\025\033\034\034\040\035\006\036\056\037" +
    "\057\045\027\051\005\052\012\001\001\000\002\001\001" +
    "\000\052\006\013\010\060\012\035\013\234\014\020\017" +
    "\045\022\036\026\055\027\064\030\047\031\041\032\025" +
    "\033\034\034\040\035\006\036\056\037\057\045\027\051" +
    "\005\052\012\001\001\000\002\001\001\000\022\022\036" +
    "\026\055\027\064\030\047\031\236\035\006\036\056\052" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\006\013\010\060\012\035\013\244\014\020\017\045\022" +
    "\036\023\242\025\243\026\055\027\064\030\047\031\041" +
    "\032\025\033\034\034\040\035\006\036\056\037\057\045" +
    "\027\051\005\052\012\055\241\001\001\000\002\001\001" +
    "\000\006\024\254\055\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\013\010\060" +
    "\012\035\013\247\014\020\017\045\022\036\026\055\027" +
    "\064\030\047\031\041\032\025\033\034\034\040\035\006" +
    "\036\056\037\057\045\027\051\005\052\012\001\001\000" +
    "\002\001\001\000\052\006\013\010\060\012\035\013\251" +
    "\014\020\017\045\022\036\026\055\027\064\030\047\031" +
    "\041\032\025\033\034\034\040\035\006\036\056\037\057" +
    "\045\027\051\005\052\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\006\013\010\060\012\035\013\244" +
    "\014\020\017\045\022\036\023\256\026\055\027\064\030" +
    "\047\031\041\032\025\033\034\034\040\035\006\036\056" +
    "\037\057\045\027\051\005\052\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\257\055\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // varAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("varAux",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // varAux ::= COMMA VAR varAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> vl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  vl.add(0,v);
		  RESULT = vl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("varAux",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vars ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vars ::= VAR varAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> vl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		vl.add(0,v);
		RESULT = vl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vars",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // value ::= REAL 
            {
              Exp RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(rlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // value ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bool ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBool(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bool",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bool ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBool(t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bool",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // charLit ::= UNI 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpChar(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // charLit ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // charLit ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpChar(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charLit",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= procCall 
            {
              Exp RESULT =null;
		int pcallleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pcallright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp pcall = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pcall; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= VAR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= charLit 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= bool 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= value 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // power ::= power POWER factor 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpPow(p, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpMod(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpDiv(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpMul(t, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithExp ::= LPAREN MINUS arithExp RPAREN 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new ExpNeg(ae); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bitOp ::= arithExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bitOp ::= bitOp BOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBOr(b,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bitOp ::= bitOp BAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBAnd(b,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitOp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relop ::= bitOp 
            {
              ExpRelOps RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ExpRelOps(ae);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relop ::= relop RELOP bitOp 
            {
              ExpRelOps RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ExpRelOps r = (ExpRelOps)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				r.add(ae, sign);
				RESULT = r;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // negation ::= relop 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpRelOps r = (ExpRelOps)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("negation",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // negation ::= NOT relop 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpRelOps r = (ExpRelOps)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNot(r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("negation",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logop ::= negation 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logop ::= logop OR negation 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpOr(l, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logop ::= logop AND negation 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpAnd(l, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logop",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listExp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listExp ::= LSQUARE expListE RSQUARE 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binding ::= VAR ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              Statement RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new StmtLet(bs, body);
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				ArrayList<Exp> ls = new ArrayList<>(); 
				ls.add(e);
				RESULT = ls; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				pl.add(e); 
				RESULT = pl; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procCall ::= factor LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp id = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
					RESULT = new ExpProcCall(id, list);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procCall",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
					ArrayList<String> lst = new ArrayList<>();
					lst.add(v);
					RESULT = lst; 
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					params.add(v);
					RESULT = params;
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = params; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procDefn ::= PROC VAR expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcSingle(v, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procDefn ::= PROC LPAREN paramListE PERIOD VAR RPAREN expression 
            {
              Exp RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String rest = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcMulti(params, rest, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procDefn ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new ExpProcN(params, body);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compoundExp ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = body; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("compoundExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // whileExp ::= WHILE LPAREN relop RPAREN expression 
            {
              Exp RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ExpRelOps cond = (ExpRelOps)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpWhile(cond, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("whileExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // forExp ::= FOR LPAREN expression RPAREN expression 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpFor(size, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("forExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vectorExp ::= LSQUARE COLON expListE COLON RSQUARE 
            {
              Exp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
					RESULT = new ExpVector(list);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= vectorExp 
            {
              Exp RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ve = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ve; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= definition 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= caseStmt 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= IOStmt 
            {
              Exp RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement io = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = io; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= listExp 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp le = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = le; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= procDefn 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = proc; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= compoundExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= logop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definition ::= DEF VAR expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new StmtDefinition(v, e);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment ::= vars ASSIGN expListE 
            {
              StmtAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   			RESULT = new StmtAssignment(v, e);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // clause ::= ELSE COLON expression 
            {
              Clause RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Clause (new ExpBool(true),s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clause",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // clause ::= expression COLON expression 
            {
              Clause RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Clause(e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clause",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clauseAux ::= empty 
            {
              ArrayList<Clause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseAux",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clauseAux ::= COMMA clause clauseAux 
            {
              ArrayList<Clause> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Clause> vl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  vl.add(0,v);
		  RESULT = vl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseAux",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // clauseList ::= empty 
            {
              ArrayList<Clause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clauseList ::= clause clauseAux 
            {
              ArrayList<Clause> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Clause> vl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		vl.add(0,v);
		RESULT = vl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // caseStmt ::= CASE LBRACE clauseList RBRACE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Clause> c = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtCase(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseStmt",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ifStmt ::= IF expression THEN expression 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtIf(p,e,null); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ifStmt ::= IF expression THEN expression ELSE expression 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtIf(p,e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IOStmt ::= IO LPAREN expListE RPAREN 
            {
              Statement RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String io = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtIO(io,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IOStmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= whileExp SEMI 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp w = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(w); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= forExp SEMI 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= ifStmt SEMI 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement is = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = is; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= letStmt SEMI 
            {
              Statement RESULT =null;
		int lSleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement lS = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = lS; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment SEMI 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtAssignment a = (StmtAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new StmtSequence(s);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					lst.add(s); 
					RESULT = lst;
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

